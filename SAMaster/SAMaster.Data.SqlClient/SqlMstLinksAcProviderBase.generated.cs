
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlMstLinksAcProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using SAMaster.Entities;
using SAMaster.Data;
using SAMaster.Data.Bases;

#endregion

namespace SAMaster.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="MstLinksAc"/> entity.
	///</summary>
	public abstract partial class SqlMstLinksAcProviderBase : MstLinksAcProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlMstLinksAcProviderBase"/> instance.
		/// </summary>
		public SqlMstLinksAcProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlMstLinksAcProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlMstLinksAcProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_mapinfoId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _mapinfoId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@MapinfoId", DbType.Int32, _mapinfoId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(MstLinksAc)
					,_mapinfoId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of SAMaster.Entities.MstLinksAc objects.</returns>
		public override TList<MstLinksAc> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<MstLinksAc>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@MapinfoId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MlinkId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CompKey", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@UsNode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DsNode", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PipeShape", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LinkType", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PipeFlowType", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Length", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DiamWidth", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Height", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Material", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Upsdpth", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Dwndpth", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Usie", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Dsie", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AsBuilt", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Instdate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Fromx", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Fromy", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Tox", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Toy", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Roughness", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TimeFrame", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DataFlagSynth", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DataQual", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Hservstat", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ValidFromDate", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ValidToDate", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CadKey", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AuditNodeId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AuditDups", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AuditSpatial", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AuditOk2Go", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AuditProcTimestamp", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Qdes", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@DmeGlobalId", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("mapinfo_id ") || clause.Trim().StartsWith("mapinfo_id="))
				{
					database.SetParameterValue(commandWrapper, "@MapinfoId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mlinkid ") || clause.Trim().StartsWith("mlinkid="))
				{
					database.SetParameterValue(commandWrapper, "@MlinkId", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("compkey ") || clause.Trim().StartsWith("compkey="))
				{
					database.SetParameterValue(commandWrapper, "@CompKey", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("usnode ") || clause.Trim().StartsWith("usnode="))
				{
					database.SetParameterValue(commandWrapper, "@UsNode", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dsnode ") || clause.Trim().StartsWith("dsnode="))
				{
					database.SetParameterValue(commandWrapper, "@DsNode", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pipeshape ") || clause.Trim().StartsWith("pipeshape="))
				{
					database.SetParameterValue(commandWrapper, "@PipeShape", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("linktype ") || clause.Trim().StartsWith("linktype="))
				{
					database.SetParameterValue(commandWrapper, "@LinkType", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("pipeflowtype ") || clause.Trim().StartsWith("pipeflowtype="))
				{
					database.SetParameterValue(commandWrapper, "@PipeFlowType", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("length ") || clause.Trim().StartsWith("length="))
				{
					database.SetParameterValue(commandWrapper, "@Length", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("diamwidth ") || clause.Trim().StartsWith("diamwidth="))
				{
					database.SetParameterValue(commandWrapper, "@DiamWidth", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("height ") || clause.Trim().StartsWith("height="))
				{
					database.SetParameterValue(commandWrapper, "@Height", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("material ") || clause.Trim().StartsWith("material="))
				{
					database.SetParameterValue(commandWrapper, "@Material", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("upsdpth ") || clause.Trim().StartsWith("upsdpth="))
				{
					database.SetParameterValue(commandWrapper, "@Upsdpth", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dwndpth ") || clause.Trim().StartsWith("dwndpth="))
				{
					database.SetParameterValue(commandWrapper, "@Dwndpth", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("usie ") || clause.Trim().StartsWith("usie="))
				{
					database.SetParameterValue(commandWrapper, "@Usie", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dsie ") || clause.Trim().StartsWith("dsie="))
				{
					database.SetParameterValue(commandWrapper, "@Dsie", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("asbuilt ") || clause.Trim().StartsWith("asbuilt="))
				{
					database.SetParameterValue(commandWrapper, "@AsBuilt", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("instdate ") || clause.Trim().StartsWith("instdate="))
				{
					database.SetParameterValue(commandWrapper, "@Instdate", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fromx ") || clause.Trim().StartsWith("fromx="))
				{
					database.SetParameterValue(commandWrapper, "@Fromx", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fromy ") || clause.Trim().StartsWith("fromy="))
				{
					database.SetParameterValue(commandWrapper, "@Fromy", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tox ") || clause.Trim().StartsWith("tox="))
				{
					database.SetParameterValue(commandWrapper, "@Tox", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("toy ") || clause.Trim().StartsWith("toy="))
				{
					database.SetParameterValue(commandWrapper, "@Toy", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("roughness ") || clause.Trim().StartsWith("roughness="))
				{
					database.SetParameterValue(commandWrapper, "@Roughness", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("timeframe ") || clause.Trim().StartsWith("timeframe="))
				{
					database.SetParameterValue(commandWrapper, "@TimeFrame", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dataflagsynth ") || clause.Trim().StartsWith("dataflagsynth="))
				{
					database.SetParameterValue(commandWrapper, "@DataFlagSynth", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dataqual ") || clause.Trim().StartsWith("dataqual="))
				{
					database.SetParameterValue(commandWrapper, "@DataQual", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("hservstat ") || clause.Trim().StartsWith("hservstat="))
				{
					database.SetParameterValue(commandWrapper, "@Hservstat", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("validfromdate ") || clause.Trim().StartsWith("validfromdate="))
				{
					database.SetParameterValue(commandWrapper, "@ValidFromDate", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("validtodate ") || clause.Trim().StartsWith("validtodate="))
				{
					database.SetParameterValue(commandWrapper, "@ValidToDate", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cadkey ") || clause.Trim().StartsWith("cadkey="))
				{
					database.SetParameterValue(commandWrapper, "@CadKey", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("auditnodeid ") || clause.Trim().StartsWith("auditnodeid="))
				{
					database.SetParameterValue(commandWrapper, "@AuditNodeId", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("auditdups ") || clause.Trim().StartsWith("auditdups="))
				{
					database.SetParameterValue(commandWrapper, "@AuditDups", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("auditspatial ") || clause.Trim().StartsWith("auditspatial="))
				{
					database.SetParameterValue(commandWrapper, "@AuditSpatial", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("auditok2go ") || clause.Trim().StartsWith("auditok2go="))
				{
					database.SetParameterValue(commandWrapper, "@AuditOk2Go", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("auditproctimestamp ") || clause.Trim().StartsWith("auditproctimestamp="))
				{
					database.SetParameterValue(commandWrapper, "@AuditProcTimestamp", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("qdes ") || clause.Trim().StartsWith("qdes="))
				{
					database.SetParameterValue(commandWrapper, "@Qdes", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("dme_globalid ") || clause.Trim().StartsWith("dme_globalid="))
				{
					database.SetParameterValue(commandWrapper, "@DmeGlobalId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<MstLinksAc> rows = new TList<MstLinksAc>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of SAMaster.Entities.MstLinksAc objects.</returns>
		public override TList<MstLinksAc> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_Find_Dynamic", typeof(MstLinksAcColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<MstLinksAc> rows = new TList<MstLinksAc>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SAMaster.Entities.MstLinksAc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<MstLinksAc> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<MstLinksAc> rows = new TList<MstLinksAc>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SAMaster.Entities.MstLinksAc objects.</returns>
		public override TList<MstLinksAc> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<MstLinksAc> rows = new TList<MstLinksAc>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByDsNode
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_mst_links_ac_DSmst_nodes_ac key.
		///		FK_mst_links_ac_DSmst_nodes_ac Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_dsNode"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SAMaster.Entities.MstLinksAc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<MstLinksAc> GetByDsNode(TransactionManager transactionManager, System.String _dsNode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_GetByDsNode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@DsNode", DbType.String, _dsNode);
			
			IDataReader reader = null;
			TList<MstLinksAc> rows = new TList<MstLinksAc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByDsNode", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByDsNode", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByUsNode
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_mst_links_ac_USmst_nodes_ac key.
		///		FK_mst_links_ac_USmst_nodes_ac Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_usNode"></param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SAMaster.Entities.MstLinksAc objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<MstLinksAc> GetByUsNode(TransactionManager transactionManager, System.String _usNode, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_GetByUsNode", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@UsNode", DbType.String, _usNode);
			
			IDataReader reader = null;
			TList<MstLinksAc> rows = new TList<MstLinksAc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByUsNode", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByUsNode", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByMapinfoId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_mst_links_ac index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_mapinfoId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="SAMaster.Entities.MstLinksAc"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override SAMaster.Entities.MstLinksAc GetByMapinfoId(TransactionManager transactionManager, System.Int32 _mapinfoId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_GetByMapinfoId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@MapinfoId", DbType.Int32, _mapinfoId);
			
			IDataReader reader = null;
			TList<MstLinksAc> tmp = new TList<MstLinksAc>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByMapinfoId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByMapinfoId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the SAMaster.Entities.MstLinksAc object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<SAMaster.Entities.MstLinksAc> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "mst_links_ac";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("MAPINFO_ID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("MLinkID", typeof(System.Int32));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("CompKey", typeof(System.Int32));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("USNode", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("DSNode", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("PipeShape", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("LinkType", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("PipeFlowType", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("Length", typeof(System.Double));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("DiamWidth", typeof(System.Double));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("Height", typeof(System.Double));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("Material", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("upsdpth", typeof(System.Double));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("dwndpth", typeof(System.Double));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("USIE", typeof(System.Double));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("DSIE", typeof(System.Double));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("AsBuilt", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("Instdate", typeof(System.DateTime));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("FromX", typeof(System.Double));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("FromY", typeof(System.Double));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("ToX", typeof(System.Double));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ToY", typeof(System.Double));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("Roughness", typeof(System.Double));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("TimeFrame", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("DataFlagSynth", typeof(System.Int32));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("DataQual", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("Hservstat", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("ValidFromDate", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("ValidToDate", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("CADKey", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("AuditNodeID", typeof(System.String));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("AuditDups", typeof(System.String));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("AuditSpatial", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("AuditOK2Go", typeof(System.Boolean));
			col33.AllowDBNull = false;		
			DataColumn col34 = dataTable.Columns.Add("AuditProcTimestamp", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("Qdes", typeof(System.Double));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("DME_GlobalID", typeof(System.Int32));
			col36.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
			bulkCopy.ColumnMappings.Add("MLinkID", "MLinkID");
			bulkCopy.ColumnMappings.Add("CompKey", "CompKey");
			bulkCopy.ColumnMappings.Add("USNode", "USNode");
			bulkCopy.ColumnMappings.Add("DSNode", "DSNode");
			bulkCopy.ColumnMappings.Add("PipeShape", "PipeShape");
			bulkCopy.ColumnMappings.Add("LinkType", "LinkType");
			bulkCopy.ColumnMappings.Add("PipeFlowType", "PipeFlowType");
			bulkCopy.ColumnMappings.Add("Length", "Length");
			bulkCopy.ColumnMappings.Add("DiamWidth", "DiamWidth");
			bulkCopy.ColumnMappings.Add("Height", "Height");
			bulkCopy.ColumnMappings.Add("Material", "Material");
			bulkCopy.ColumnMappings.Add("upsdpth", "upsdpth");
			bulkCopy.ColumnMappings.Add("dwndpth", "dwndpth");
			bulkCopy.ColumnMappings.Add("USIE", "USIE");
			bulkCopy.ColumnMappings.Add("DSIE", "DSIE");
			bulkCopy.ColumnMappings.Add("AsBuilt", "AsBuilt");
			bulkCopy.ColumnMappings.Add("Instdate", "Instdate");
			bulkCopy.ColumnMappings.Add("FromX", "FromX");
			bulkCopy.ColumnMappings.Add("FromY", "FromY");
			bulkCopy.ColumnMappings.Add("ToX", "ToX");
			bulkCopy.ColumnMappings.Add("ToY", "ToY");
			bulkCopy.ColumnMappings.Add("Roughness", "Roughness");
			bulkCopy.ColumnMappings.Add("TimeFrame", "TimeFrame");
			bulkCopy.ColumnMappings.Add("DataFlagSynth", "DataFlagSynth");
			bulkCopy.ColumnMappings.Add("DataQual", "DataQual");
			bulkCopy.ColumnMappings.Add("Hservstat", "Hservstat");
			bulkCopy.ColumnMappings.Add("ValidFromDate", "ValidFromDate");
			bulkCopy.ColumnMappings.Add("ValidToDate", "ValidToDate");
			bulkCopy.ColumnMappings.Add("CADKey", "CADKey");
			bulkCopy.ColumnMappings.Add("AuditNodeID", "AuditNodeID");
			bulkCopy.ColumnMappings.Add("AuditDups", "AuditDups");
			bulkCopy.ColumnMappings.Add("AuditSpatial", "AuditSpatial");
			bulkCopy.ColumnMappings.Add("AuditOK2Go", "AuditOK2Go");
			bulkCopy.ColumnMappings.Add("AuditProcTimestamp", "AuditProcTimestamp");
			bulkCopy.ColumnMappings.Add("Qdes", "Qdes");
			bulkCopy.ColumnMappings.Add("DME_GlobalID", "DME_GlobalID");
			
			foreach(SAMaster.Entities.MstLinksAc entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["MAPINFO_ID"] = entity.MapinfoId;
							
				
					row["MLinkID"] = entity.MlinkId.HasValue ? (object) entity.MlinkId  : System.DBNull.Value;
							
				
					row["CompKey"] = entity.CompKey.HasValue ? (object) entity.CompKey  : System.DBNull.Value;
							
				
					row["USNode"] = entity.UsNode;
							
				
					row["DSNode"] = entity.DsNode;
							
				
					row["PipeShape"] = entity.PipeShape;
							
				
					row["LinkType"] = entity.LinkType;
							
				
					row["PipeFlowType"] = entity.PipeFlowType;
							
				
					row["Length"] = entity.Length.HasValue ? (object) entity.Length  : System.DBNull.Value;
							
				
					row["DiamWidth"] = entity.DiamWidth.HasValue ? (object) entity.DiamWidth  : System.DBNull.Value;
							
				
					row["Height"] = entity.Height.HasValue ? (object) entity.Height  : System.DBNull.Value;
							
				
					row["Material"] = entity.Material;
							
				
					row["upsdpth"] = entity.Upsdpth.HasValue ? (object) entity.Upsdpth  : System.DBNull.Value;
							
				
					row["dwndpth"] = entity.Dwndpth.HasValue ? (object) entity.Dwndpth  : System.DBNull.Value;
							
				
					row["USIE"] = entity.Usie.HasValue ? (object) entity.Usie  : System.DBNull.Value;
							
				
					row["DSIE"] = entity.Dsie.HasValue ? (object) entity.Dsie  : System.DBNull.Value;
							
				
					row["AsBuilt"] = entity.AsBuilt;
							
				
					row["Instdate"] = entity.Instdate.HasValue ? (object) entity.Instdate  : System.DBNull.Value;
							
				
					row["FromX"] = entity.Fromx.HasValue ? (object) entity.Fromx  : System.DBNull.Value;
							
				
					row["FromY"] = entity.Fromy.HasValue ? (object) entity.Fromy  : System.DBNull.Value;
							
				
					row["ToX"] = entity.Tox.HasValue ? (object) entity.Tox  : System.DBNull.Value;
							
				
					row["ToY"] = entity.Toy.HasValue ? (object) entity.Toy  : System.DBNull.Value;
							
				
					row["Roughness"] = entity.Roughness.HasValue ? (object) entity.Roughness  : System.DBNull.Value;
							
				
					row["TimeFrame"] = entity.TimeFrame;
							
				
					row["DataFlagSynth"] = entity.DataFlagSynth.HasValue ? (object) entity.DataFlagSynth  : System.DBNull.Value;
							
				
					row["DataQual"] = entity.DataQual;
							
				
					row["Hservstat"] = entity.Hservstat;
							
				
					row["ValidFromDate"] = entity.ValidFromDate;
							
				
					row["ValidToDate"] = entity.ValidToDate;
							
				
					row["CADKey"] = entity.CadKey;
							
				
					row["AuditNodeID"] = entity.AuditNodeId;
							
				
					row["AuditDups"] = entity.AuditDups;
							
				
					row["AuditSpatial"] = entity.AuditSpatial;
							
				
					row["AuditOK2Go"] = entity.AuditOk2Go;
							
				
					row["AuditProcTimestamp"] = entity.AuditProcTimestamp;
							
				
					row["Qdes"] = entity.Qdes.HasValue ? (object) entity.Qdes  : System.DBNull.Value;
							
				
					row["DME_GlobalID"] = entity.DmeGlobalId.HasValue ? (object) entity.DmeGlobalId  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(SAMaster.Entities.MstLinksAc entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a SAMaster.Entities.MstLinksAc object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">SAMaster.Entities.MstLinksAc object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the SAMaster.Entities.MstLinksAc object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, SAMaster.Entities.MstLinksAc entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_Insert", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@MapinfoId", DbType.Int32, entity.MapinfoId );
			database.AddInParameter(commandWrapper, "@MlinkId", DbType.Int32, (entity.MlinkId.HasValue ? (object) entity.MlinkId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CompKey", DbType.Int32, (entity.CompKey.HasValue ? (object) entity.CompKey  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@UsNode", DbType.String, entity.UsNode );
			database.AddInParameter(commandWrapper, "@DsNode", DbType.String, entity.DsNode );
			database.AddInParameter(commandWrapper, "@PipeShape", DbType.String, entity.PipeShape );
			database.AddInParameter(commandWrapper, "@LinkType", DbType.String, entity.LinkType );
			database.AddInParameter(commandWrapper, "@PipeFlowType", DbType.String, entity.PipeFlowType );
			database.AddInParameter(commandWrapper, "@Length", DbType.Double, (entity.Length.HasValue ? (object) entity.Length  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DiamWidth", DbType.Double, (entity.DiamWidth.HasValue ? (object) entity.DiamWidth  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Height", DbType.Double, (entity.Height.HasValue ? (object) entity.Height  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Material", DbType.String, entity.Material );
			database.AddInParameter(commandWrapper, "@Upsdpth", DbType.Double, (entity.Upsdpth.HasValue ? (object) entity.Upsdpth  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Dwndpth", DbType.Double, (entity.Dwndpth.HasValue ? (object) entity.Dwndpth  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Usie", DbType.Double, (entity.Usie.HasValue ? (object) entity.Usie  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Dsie", DbType.Double, (entity.Dsie.HasValue ? (object) entity.Dsie  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AsBuilt", DbType.String, entity.AsBuilt );
			database.AddInParameter(commandWrapper, "@Instdate", DbType.DateTime, (entity.Instdate.HasValue ? (object) entity.Instdate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Fromx", DbType.Double, (entity.Fromx.HasValue ? (object) entity.Fromx  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Fromy", DbType.Double, (entity.Fromy.HasValue ? (object) entity.Fromy  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Tox", DbType.Double, (entity.Tox.HasValue ? (object) entity.Tox  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Toy", DbType.Double, (entity.Toy.HasValue ? (object) entity.Toy  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Roughness", DbType.Double, (entity.Roughness.HasValue ? (object) entity.Roughness  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TimeFrame", DbType.String, entity.TimeFrame );
			database.AddInParameter(commandWrapper, "@DataFlagSynth", DbType.Int32, (entity.DataFlagSynth.HasValue ? (object) entity.DataFlagSynth  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DataQual", DbType.String, entity.DataQual );
			database.AddInParameter(commandWrapper, "@Hservstat", DbType.String, entity.Hservstat );
			database.AddInParameter(commandWrapper, "@ValidFromDate", DbType.String, entity.ValidFromDate );
			database.AddInParameter(commandWrapper, "@ValidToDate", DbType.String, entity.ValidToDate );
			database.AddInParameter(commandWrapper, "@CadKey", DbType.String, entity.CadKey );
			database.AddInParameter(commandWrapper, "@AuditNodeId", DbType.String, entity.AuditNodeId );
			database.AddInParameter(commandWrapper, "@AuditDups", DbType.String, entity.AuditDups );
			database.AddInParameter(commandWrapper, "@AuditSpatial", DbType.String, entity.AuditSpatial );
			database.AddInParameter(commandWrapper, "@AuditOk2Go", DbType.Boolean, entity.AuditOk2Go );
			database.AddInParameter(commandWrapper, "@AuditProcTimestamp", DbType.String, entity.AuditProcTimestamp );
			database.AddInParameter(commandWrapper, "@Qdes", DbType.Double, (entity.Qdes.HasValue ? (object) entity.Qdes  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@DmeGlobalId", DbType.Int32, (entity.DmeGlobalId.HasValue ? (object) entity.DmeGlobalId  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			
			entity.OriginalMapinfoId = entity.MapinfoId;
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">SAMaster.Entities.MstLinksAc object to update.</param>
		/// <remarks>
		///		After updating the datasource, the SAMaster.Entities.MstLinksAc object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, SAMaster.Entities.MstLinksAc entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.mst_links_ac_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@MapinfoId", DbType.Int32, entity.MapinfoId );
			database.AddInParameter(commandWrapper, "@OriginalMapinfoId", DbType.Int32, entity.OriginalMapinfoId);
			database.AddInParameter(commandWrapper, "@MlinkId", DbType.Int32, (entity.MlinkId.HasValue ? (object) entity.MlinkId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CompKey", DbType.Int32, (entity.CompKey.HasValue ? (object) entity.CompKey : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@UsNode", DbType.String, entity.UsNode );
			database.AddInParameter(commandWrapper, "@DsNode", DbType.String, entity.DsNode );
			database.AddInParameter(commandWrapper, "@PipeShape", DbType.String, entity.PipeShape );
			database.AddInParameter(commandWrapper, "@LinkType", DbType.String, entity.LinkType );
			database.AddInParameter(commandWrapper, "@PipeFlowType", DbType.String, entity.PipeFlowType );
			database.AddInParameter(commandWrapper, "@Length", DbType.Double, (entity.Length.HasValue ? (object) entity.Length : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DiamWidth", DbType.Double, (entity.DiamWidth.HasValue ? (object) entity.DiamWidth : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Height", DbType.Double, (entity.Height.HasValue ? (object) entity.Height : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Material", DbType.String, entity.Material );
			database.AddInParameter(commandWrapper, "@Upsdpth", DbType.Double, (entity.Upsdpth.HasValue ? (object) entity.Upsdpth : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Dwndpth", DbType.Double, (entity.Dwndpth.HasValue ? (object) entity.Dwndpth : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Usie", DbType.Double, (entity.Usie.HasValue ? (object) entity.Usie : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Dsie", DbType.Double, (entity.Dsie.HasValue ? (object) entity.Dsie : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AsBuilt", DbType.String, entity.AsBuilt );
			database.AddInParameter(commandWrapper, "@Instdate", DbType.DateTime, (entity.Instdate.HasValue ? (object) entity.Instdate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Fromx", DbType.Double, (entity.Fromx.HasValue ? (object) entity.Fromx : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Fromy", DbType.Double, (entity.Fromy.HasValue ? (object) entity.Fromy : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Tox", DbType.Double, (entity.Tox.HasValue ? (object) entity.Tox : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Toy", DbType.Double, (entity.Toy.HasValue ? (object) entity.Toy : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Roughness", DbType.Double, (entity.Roughness.HasValue ? (object) entity.Roughness : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TimeFrame", DbType.String, entity.TimeFrame );
			database.AddInParameter(commandWrapper, "@DataFlagSynth", DbType.Int32, (entity.DataFlagSynth.HasValue ? (object) entity.DataFlagSynth : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DataQual", DbType.String, entity.DataQual );
			database.AddInParameter(commandWrapper, "@Hservstat", DbType.String, entity.Hservstat );
			database.AddInParameter(commandWrapper, "@ValidFromDate", DbType.String, entity.ValidFromDate );
			database.AddInParameter(commandWrapper, "@ValidToDate", DbType.String, entity.ValidToDate );
			database.AddInParameter(commandWrapper, "@CadKey", DbType.String, entity.CadKey );
			database.AddInParameter(commandWrapper, "@AuditNodeId", DbType.String, entity.AuditNodeId );
			database.AddInParameter(commandWrapper, "@AuditDups", DbType.String, entity.AuditDups );
			database.AddInParameter(commandWrapper, "@AuditSpatial", DbType.String, entity.AuditSpatial );
			database.AddInParameter(commandWrapper, "@AuditOk2Go", DbType.Boolean, entity.AuditOk2Go );
			database.AddInParameter(commandWrapper, "@AuditProcTimestamp", DbType.String, entity.AuditProcTimestamp );
			database.AddInParameter(commandWrapper, "@Qdes", DbType.Double, (entity.Qdes.HasValue ? (object) entity.Qdes : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@DmeGlobalId", DbType.Int32, (entity.DmeGlobalId.HasValue ? (object) entity.DmeGlobalId : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			entity.OriginalMapinfoId = entity.MapinfoId;
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
