
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MstLinksAc.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using SAMaster.Entities.Validation;
#endregion

namespace SAMaster.Entities
{
	///<summary>
	/// An object representation of the 'mst_links_ac' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MstLinksAcBase : EntityBase, IMstLinksAc, IEntityId<MstLinksAcKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MstLinksAcEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MstLinksAcEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MstLinksAcEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MstLinksAc> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MstLinksAcEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MstLinksAcEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MstLinksAcBase"/> instance.
		///</summary>
		public MstLinksAcBase()
		{
			this.entityData = new MstLinksAcEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MstLinksAcBase"/> instance.
		///</summary>
		///<param name="_mapinfoId"></param>
		///<param name="_mlinkId"></param>
		///<param name="_compKey"></param>
		///<param name="_usNode"></param>
		///<param name="_dsNode"></param>
		///<param name="_pipeShape"></param>
		///<param name="_linkType"></param>
		///<param name="_pipeFlowType"></param>
		///<param name="_length"></param>
		///<param name="_diamWidth"></param>
		///<param name="_height"></param>
		///<param name="_material"></param>
		///<param name="_upsdpth"></param>
		///<param name="_dwndpth"></param>
		///<param name="_usie"></param>
		///<param name="_dsie"></param>
		///<param name="_asBuilt"></param>
		///<param name="_instdate"></param>
		///<param name="_fromx"></param>
		///<param name="_fromy"></param>
		///<param name="_tox"></param>
		///<param name="_toy"></param>
		///<param name="_roughness"></param>
		///<param name="_timeFrame"></param>
		///<param name="_dataFlagSynth"></param>
		///<param name="_dataQual"></param>
		///<param name="_hservstat"></param>
		///<param name="_validFromDate"></param>
		///<param name="_validToDate"></param>
		///<param name="_cadKey"></param>
		///<param name="_auditNodeId"></param>
		///<param name="_auditDups"></param>
		///<param name="_auditSpatial"></param>
		///<param name="_auditOk2Go"></param>
		///<param name="_auditProcTimestamp"></param>
		///<param name="_qdes"></param>
		///<param name="_dmeGlobalId"></param>
		public MstLinksAcBase(System.Int32 _mapinfoId, System.Int32? _mlinkId, System.Int32? _compKey, 
			System.String _usNode, System.String _dsNode, System.String _pipeShape, System.String _linkType, 
			System.String _pipeFlowType, System.Double? _length, System.Double? _diamWidth, System.Double? _height, 
			System.String _material, System.Double? _upsdpth, System.Double? _dwndpth, System.Double? _usie, 
			System.Double? _dsie, System.String _asBuilt, System.DateTime? _instdate, System.Double? _fromx, 
			System.Double? _fromy, System.Double? _tox, System.Double? _toy, System.Double? _roughness, 
			System.String _timeFrame, System.Int32? _dataFlagSynth, System.String _dataQual, System.String _hservstat, 
			System.String _validFromDate, System.String _validToDate, System.String _cadKey, System.String _auditNodeId, 
			System.String _auditDups, System.String _auditSpatial, System.Boolean _auditOk2Go, System.String _auditProcTimestamp, 
			System.Double? _qdes, System.Int32? _dmeGlobalId)
		{
			this.entityData = new MstLinksAcEntityData();
			this.backupData = null;

			this.MapinfoId = _mapinfoId;
			this.MlinkId = _mlinkId;
			this.CompKey = _compKey;
			this.UsNode = _usNode;
			this.DsNode = _dsNode;
			this.PipeShape = _pipeShape;
			this.LinkType = _linkType;
			this.PipeFlowType = _pipeFlowType;
			this.Length = _length;
			this.DiamWidth = _diamWidth;
			this.Height = _height;
			this.Material = _material;
			this.Upsdpth = _upsdpth;
			this.Dwndpth = _dwndpth;
			this.Usie = _usie;
			this.Dsie = _dsie;
			this.AsBuilt = _asBuilt;
			this.Instdate = _instdate;
			this.Fromx = _fromx;
			this.Fromy = _fromy;
			this.Tox = _tox;
			this.Toy = _toy;
			this.Roughness = _roughness;
			this.TimeFrame = _timeFrame;
			this.DataFlagSynth = _dataFlagSynth;
			this.DataQual = _dataQual;
			this.Hservstat = _hservstat;
			this.ValidFromDate = _validFromDate;
			this.ValidToDate = _validToDate;
			this.CadKey = _cadKey;
			this.AuditNodeId = _auditNodeId;
			this.AuditDups = _auditDups;
			this.AuditSpatial = _auditSpatial;
			this.AuditOk2Go = _auditOk2Go;
			this.AuditProcTimestamp = _auditProcTimestamp;
			this.Qdes = _qdes;
			this.DmeGlobalId = _dmeGlobalId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MstLinksAc"/> instance.
		///</summary>
		///<param name="_mapinfoId"></param>
		///<param name="_mlinkId"></param>
		///<param name="_compKey"></param>
		///<param name="_usNode"></param>
		///<param name="_dsNode"></param>
		///<param name="_pipeShape"></param>
		///<param name="_linkType"></param>
		///<param name="_pipeFlowType"></param>
		///<param name="_length"></param>
		///<param name="_diamWidth"></param>
		///<param name="_height"></param>
		///<param name="_material"></param>
		///<param name="_upsdpth"></param>
		///<param name="_dwndpth"></param>
		///<param name="_usie"></param>
		///<param name="_dsie"></param>
		///<param name="_asBuilt"></param>
		///<param name="_instdate"></param>
		///<param name="_fromx"></param>
		///<param name="_fromy"></param>
		///<param name="_tox"></param>
		///<param name="_toy"></param>
		///<param name="_roughness"></param>
		///<param name="_timeFrame"></param>
		///<param name="_dataFlagSynth"></param>
		///<param name="_dataQual"></param>
		///<param name="_hservstat"></param>
		///<param name="_validFromDate"></param>
		///<param name="_validToDate"></param>
		///<param name="_cadKey"></param>
		///<param name="_auditNodeId"></param>
		///<param name="_auditDups"></param>
		///<param name="_auditSpatial"></param>
		///<param name="_auditOk2Go"></param>
		///<param name="_auditProcTimestamp"></param>
		///<param name="_qdes"></param>
		///<param name="_dmeGlobalId"></param>
		public static MstLinksAc CreateMstLinksAc(System.Int32 _mapinfoId, System.Int32? _mlinkId, System.Int32? _compKey, 
			System.String _usNode, System.String _dsNode, System.String _pipeShape, System.String _linkType, 
			System.String _pipeFlowType, System.Double? _length, System.Double? _diamWidth, System.Double? _height, 
			System.String _material, System.Double? _upsdpth, System.Double? _dwndpth, System.Double? _usie, 
			System.Double? _dsie, System.String _asBuilt, System.DateTime? _instdate, System.Double? _fromx, 
			System.Double? _fromy, System.Double? _tox, System.Double? _toy, System.Double? _roughness, 
			System.String _timeFrame, System.Int32? _dataFlagSynth, System.String _dataQual, System.String _hservstat, 
			System.String _validFromDate, System.String _validToDate, System.String _cadKey, System.String _auditNodeId, 
			System.String _auditDups, System.String _auditSpatial, System.Boolean _auditOk2Go, System.String _auditProcTimestamp, 
			System.Double? _qdes, System.Int32? _dmeGlobalId)
		{
			MstLinksAc newMstLinksAc = new MstLinksAc();
			newMstLinksAc.MapinfoId = _mapinfoId;
			newMstLinksAc.MlinkId = _mlinkId;
			newMstLinksAc.CompKey = _compKey;
			newMstLinksAc.UsNode = _usNode;
			newMstLinksAc.DsNode = _dsNode;
			newMstLinksAc.PipeShape = _pipeShape;
			newMstLinksAc.LinkType = _linkType;
			newMstLinksAc.PipeFlowType = _pipeFlowType;
			newMstLinksAc.Length = _length;
			newMstLinksAc.DiamWidth = _diamWidth;
			newMstLinksAc.Height = _height;
			newMstLinksAc.Material = _material;
			newMstLinksAc.Upsdpth = _upsdpth;
			newMstLinksAc.Dwndpth = _dwndpth;
			newMstLinksAc.Usie = _usie;
			newMstLinksAc.Dsie = _dsie;
			newMstLinksAc.AsBuilt = _asBuilt;
			newMstLinksAc.Instdate = _instdate;
			newMstLinksAc.Fromx = _fromx;
			newMstLinksAc.Fromy = _fromy;
			newMstLinksAc.Tox = _tox;
			newMstLinksAc.Toy = _toy;
			newMstLinksAc.Roughness = _roughness;
			newMstLinksAc.TimeFrame = _timeFrame;
			newMstLinksAc.DataFlagSynth = _dataFlagSynth;
			newMstLinksAc.DataQual = _dataQual;
			newMstLinksAc.Hservstat = _hservstat;
			newMstLinksAc.ValidFromDate = _validFromDate;
			newMstLinksAc.ValidToDate = _validToDate;
			newMstLinksAc.CadKey = _cadKey;
			newMstLinksAc.AuditNodeId = _auditNodeId;
			newMstLinksAc.AuditDups = _auditDups;
			newMstLinksAc.AuditSpatial = _auditSpatial;
			newMstLinksAc.AuditOk2Go = _auditOk2Go;
			newMstLinksAc.AuditProcTimestamp = _auditProcTimestamp;
			newMstLinksAc.Qdes = _qdes;
			newMstLinksAc.DmeGlobalId = _dmeGlobalId;
			return newMstLinksAc;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MapinfoId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public override System.Int32 MapinfoId
		{
			get
			{
				return this.entityData.MapinfoId; 
			}
			
			set
			{
				if (this.entityData.MapinfoId == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.MapinfoId, this.entityData.MapinfoId);
				this.entityData.MapinfoId = value;
				this.EntityId.MapinfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.MapinfoId, this.entityData.MapinfoId);
				OnPropertyChanged("MapinfoId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MAPINFO_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MAPINFO_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalMapinfoId
		{
			get { return this.entityData.OriginalMapinfoId; }
			set { this.entityData.OriginalMapinfoId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the MlinkId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMlinkIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MlinkId
		{
			get
			{
				return this.entityData.MlinkId; 
			}
			
			set
			{
				if (this.entityData.MlinkId == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.MlinkId, this.entityData.MlinkId);
				this.entityData.MlinkId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.MlinkId, this.entityData.MlinkId);
				OnPropertyChanged("MlinkId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompKey property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCompKeyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CompKey
		{
			get
			{
				return this.entityData.CompKey; 
			}
			
			set
			{
				if (this.entityData.CompKey == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.CompKey, this.entityData.CompKey);
				this.entityData.CompKey = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.CompKey, this.entityData.CompKey);
				OnPropertyChanged("CompKey");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UsNode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String UsNode
		{
			get
			{
				return this.entityData.UsNode; 
			}
			
			set
			{
				if (this.entityData.UsNode == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.UsNode, this.entityData.UsNode);
				this.entityData.UsNode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.UsNode, this.entityData.UsNode);
				OnPropertyChanged("UsNode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DsNode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String DsNode
		{
			get
			{
				return this.entityData.DsNode; 
			}
			
			set
			{
				if (this.entityData.DsNode == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.DsNode, this.entityData.DsNode);
				this.entityData.DsNode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.DsNode, this.entityData.DsNode);
				OnPropertyChanged("DsNode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PipeShape property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4)]
		public virtual System.String PipeShape
		{
			get
			{
				return this.entityData.PipeShape; 
			}
			
			set
			{
				if (this.entityData.PipeShape == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.PipeShape, this.entityData.PipeShape);
				this.entityData.PipeShape = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.PipeShape, this.entityData.PipeShape);
				OnPropertyChanged("PipeShape");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LinkType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String LinkType
		{
			get
			{
				return this.entityData.LinkType; 
			}
			
			set
			{
				if (this.entityData.LinkType == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.LinkType, this.entityData.LinkType);
				this.entityData.LinkType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.LinkType, this.entityData.LinkType);
				OnPropertyChanged("LinkType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PipeFlowType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String PipeFlowType
		{
			get
			{
				return this.entityData.PipeFlowType; 
			}
			
			set
			{
				if (this.entityData.PipeFlowType == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.PipeFlowType, this.entityData.PipeFlowType);
				this.entityData.PipeFlowType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.PipeFlowType, this.entityData.PipeFlowType);
				OnPropertyChanged("PipeFlowType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Length property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsLengthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Length
		{
			get
			{
				return this.entityData.Length; 
			}
			
			set
			{
				if (this.entityData.Length == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Length, this.entityData.Length);
				this.entityData.Length = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Length, this.entityData.Length);
				OnPropertyChanged("Length");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiamWidth property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsDiamWidthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? DiamWidth
		{
			get
			{
				return this.entityData.DiamWidth; 
			}
			
			set
			{
				if (this.entityData.DiamWidth == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.DiamWidth, this.entityData.DiamWidth);
				this.entityData.DiamWidth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.DiamWidth, this.entityData.DiamWidth);
				OnPropertyChanged("DiamWidth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Height property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsHeightNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Height
		{
			get
			{
				return this.entityData.Height; 
			}
			
			set
			{
				if (this.entityData.Height == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Height, this.entityData.Height);
				this.entityData.Height = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Height, this.entityData.Height);
				OnPropertyChanged("Height");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Material property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String Material
		{
			get
			{
				return this.entityData.Material; 
			}
			
			set
			{
				if (this.entityData.Material == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Material, this.entityData.Material);
				this.entityData.Material = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Material, this.entityData.Material);
				OnPropertyChanged("Material");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Upsdpth property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsUpsdpthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Upsdpth
		{
			get
			{
				return this.entityData.Upsdpth; 
			}
			
			set
			{
				if (this.entityData.Upsdpth == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Upsdpth, this.entityData.Upsdpth);
				this.entityData.Upsdpth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Upsdpth, this.entityData.Upsdpth);
				OnPropertyChanged("Upsdpth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Dwndpth property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsDwndpthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Dwndpth
		{
			get
			{
				return this.entityData.Dwndpth; 
			}
			
			set
			{
				if (this.entityData.Dwndpth == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Dwndpth, this.entityData.Dwndpth);
				this.entityData.Dwndpth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Dwndpth, this.entityData.Dwndpth);
				OnPropertyChanged("Dwndpth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Usie property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsUsieNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Usie
		{
			get
			{
				return this.entityData.Usie; 
			}
			
			set
			{
				if (this.entityData.Usie == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Usie, this.entityData.Usie);
				this.entityData.Usie = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Usie, this.entityData.Usie);
				OnPropertyChanged("Usie");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Dsie property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsDsieNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Dsie
		{
			get
			{
				return this.entityData.Dsie; 
			}
			
			set
			{
				if (this.entityData.Dsie == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Dsie, this.entityData.Dsie);
				this.entityData.Dsie = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Dsie, this.entityData.Dsie);
				OnPropertyChanged("Dsie");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AsBuilt property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 14)]
		public virtual System.String AsBuilt
		{
			get
			{
				return this.entityData.AsBuilt; 
			}
			
			set
			{
				if (this.entityData.AsBuilt == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.AsBuilt, this.entityData.AsBuilt);
				this.entityData.AsBuilt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.AsBuilt, this.entityData.AsBuilt);
				OnPropertyChanged("AsBuilt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Instdate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsInstdateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Instdate
		{
			get
			{
				return this.entityData.Instdate; 
			}
			
			set
			{
				if (this.entityData.Instdate == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Instdate, this.entityData.Instdate);
				this.entityData.Instdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Instdate, this.entityData.Instdate);
				OnPropertyChanged("Instdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fromx property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsFromxNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Fromx
		{
			get
			{
				return this.entityData.Fromx; 
			}
			
			set
			{
				if (this.entityData.Fromx == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Fromx, this.entityData.Fromx);
				this.entityData.Fromx = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Fromx, this.entityData.Fromx);
				OnPropertyChanged("Fromx");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fromy property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsFromyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Fromy
		{
			get
			{
				return this.entityData.Fromy; 
			}
			
			set
			{
				if (this.entityData.Fromy == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Fromy, this.entityData.Fromy);
				this.entityData.Fromy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Fromy, this.entityData.Fromy);
				OnPropertyChanged("Fromy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Tox property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsToxNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Tox
		{
			get
			{
				return this.entityData.Tox; 
			}
			
			set
			{
				if (this.entityData.Tox == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Tox, this.entityData.Tox);
				this.entityData.Tox = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Tox, this.entityData.Tox);
				OnPropertyChanged("Tox");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Toy property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsToyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Toy
		{
			get
			{
				return this.entityData.Toy; 
			}
			
			set
			{
				if (this.entityData.Toy == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Toy, this.entityData.Toy);
				this.entityData.Toy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Toy, this.entityData.Toy);
				OnPropertyChanged("Toy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Roughness property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsRoughnessNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Roughness
		{
			get
			{
				return this.entityData.Roughness; 
			}
			
			set
			{
				if (this.entityData.Roughness == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Roughness, this.entityData.Roughness);
				this.entityData.Roughness = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Roughness, this.entityData.Roughness);
				OnPropertyChanged("Roughness");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TimeFrame property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String TimeFrame
		{
			get
			{
				return this.entityData.TimeFrame; 
			}
			
			set
			{
				if (this.entityData.TimeFrame == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.TimeFrame, this.entityData.TimeFrame);
				this.entityData.TimeFrame = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.TimeFrame, this.entityData.TimeFrame);
				OnPropertyChanged("TimeFrame");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DataFlagSynth property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDataFlagSynthNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DataFlagSynth
		{
			get
			{
				return this.entityData.DataFlagSynth; 
			}
			
			set
			{
				if (this.entityData.DataFlagSynth == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.DataFlagSynth, this.entityData.DataFlagSynth);
				this.entityData.DataFlagSynth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.DataFlagSynth, this.entityData.DataFlagSynth);
				OnPropertyChanged("DataFlagSynth");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DataQual property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String DataQual
		{
			get
			{
				return this.entityData.DataQual; 
			}
			
			set
			{
				if (this.entityData.DataQual == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.DataQual, this.entityData.DataQual);
				this.entityData.DataQual = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.DataQual, this.entityData.DataQual);
				OnPropertyChanged("DataQual");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Hservstat property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4)]
		public virtual System.String Hservstat
		{
			get
			{
				return this.entityData.Hservstat; 
			}
			
			set
			{
				if (this.entityData.Hservstat == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Hservstat, this.entityData.Hservstat);
				this.entityData.Hservstat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Hservstat, this.entityData.Hservstat);
				OnPropertyChanged("Hservstat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValidFromDate property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8)]
		public virtual System.String ValidFromDate
		{
			get
			{
				return this.entityData.ValidFromDate; 
			}
			
			set
			{
				if (this.entityData.ValidFromDate == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.ValidFromDate, this.entityData.ValidFromDate);
				this.entityData.ValidFromDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.ValidFromDate, this.entityData.ValidFromDate);
				OnPropertyChanged("ValidFromDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ValidToDate property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8)]
		public virtual System.String ValidToDate
		{
			get
			{
				return this.entityData.ValidToDate; 
			}
			
			set
			{
				if (this.entityData.ValidToDate == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.ValidToDate, this.entityData.ValidToDate);
				this.entityData.ValidToDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.ValidToDate, this.entityData.ValidToDate);
				OnPropertyChanged("ValidToDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CadKey property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 14)]
		public virtual System.String CadKey
		{
			get
			{
				return this.entityData.CadKey; 
			}
			
			set
			{
				if (this.entityData.CadKey == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.CadKey, this.entityData.CadKey);
				this.entityData.CadKey = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.CadKey, this.entityData.CadKey);
				OnPropertyChanged("CadKey");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditNodeId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String AuditNodeId
		{
			get
			{
				return this.entityData.AuditNodeId; 
			}
			
			set
			{
				if (this.entityData.AuditNodeId == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.AuditNodeId, this.entityData.AuditNodeId);
				this.entityData.AuditNodeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.AuditNodeId, this.entityData.AuditNodeId);
				OnPropertyChanged("AuditNodeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditDups property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String AuditDups
		{
			get
			{
				return this.entityData.AuditDups; 
			}
			
			set
			{
				if (this.entityData.AuditDups == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.AuditDups, this.entityData.AuditDups);
				this.entityData.AuditDups = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.AuditDups, this.entityData.AuditDups);
				OnPropertyChanged("AuditDups");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditSpatial property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String AuditSpatial
		{
			get
			{
				return this.entityData.AuditSpatial; 
			}
			
			set
			{
				if (this.entityData.AuditSpatial == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.AuditSpatial, this.entityData.AuditSpatial);
				this.entityData.AuditSpatial = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.AuditSpatial, this.entityData.AuditSpatial);
				OnPropertyChanged("AuditSpatial");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditOk2Go property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean AuditOk2Go
		{
			get
			{
				return this.entityData.AuditOk2Go; 
			}
			
			set
			{
				if (this.entityData.AuditOk2Go == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.AuditOk2Go, this.entityData.AuditOk2Go);
				this.entityData.AuditOk2Go = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.AuditOk2Go, this.entityData.AuditOk2Go);
				OnPropertyChanged("AuditOk2Go");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuditProcTimestamp property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String AuditProcTimestamp
		{
			get
			{
				return this.entityData.AuditProcTimestamp; 
			}
			
			set
			{
				if (this.entityData.AuditProcTimestamp == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.AuditProcTimestamp, this.entityData.AuditProcTimestamp);
				this.entityData.AuditProcTimestamp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.AuditProcTimestamp, this.entityData.AuditProcTimestamp);
				OnPropertyChanged("AuditProcTimestamp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Qdes property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsQdesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Qdes
		{
			get
			{
				return this.entityData.Qdes; 
			}
			
			set
			{
				if (this.entityData.Qdes == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.Qdes, this.entityData.Qdes);
				this.entityData.Qdes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.Qdes, this.entityData.Qdes);
				OnPropertyChanged("Qdes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DmeGlobalId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDmeGlobalIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Int32? DmeGlobalId
		{
			get
			{
				return this.entityData.DmeGlobalId; 
			}
			
			set
			{
				if (this.entityData.DmeGlobalId == value)
					return;
					
				OnColumnChanging(MstLinksAcColumn.DmeGlobalId, this.entityData.DmeGlobalId);
				this.entityData.DmeGlobalId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstLinksAcColumn.DmeGlobalId, this.entityData.DmeGlobalId);
				OnPropertyChanged("DmeGlobalId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="MstNodesAc"/>.
		/// </summary>
		/// <value>The source MstNodesAc for DsNode.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MstNodesAc DsNodeSource
      	{
            get { return entityData.DsNodeSource; }
            set { entityData.DsNodeSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="MstNodesAc"/>.
		/// </summary>
		/// <value>The source MstNodesAc for UsNode.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MstNodesAc UsNodeSource
      	{
            get { return entityData.UsNodeSource; }
            set { entityData.UsNodeSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UsNode", "Us Node", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DsNode", "Ds Node", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PipeShape", "Pipe Shape", 4));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LinkType", "Link Type", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PipeFlowType", "Pipe Flow Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Material", "Material", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AsBuilt", "As Built", 14));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TimeFrame", "Time Frame", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DataQual", "Data Qual", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Hservstat", "Hservstat", 4));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ValidFromDate", "Valid From Date", 8));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ValidToDate", "Valid To Date", 8));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CadKey", "Cad Key", 14));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AuditNodeId", "Audit Node Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AuditDups", "Audit Dups", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AuditSpatial", "Audit Spatial", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AuditProcTimestamp", "Audit Proc Timestamp", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "mst_links_ac"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MAPINFO_ID", "MLinkID", "CompKey", "USNode", "DSNode", "PipeShape", "LinkType", "PipeFlowType", "Length", "DiamWidth", "Height", "Material", "upsdpth", "dwndpth", "USIE", "DSIE", "AsBuilt", "Instdate", "FromX", "FromY", "ToX", "ToY", "Roughness", "TimeFrame", "DataFlagSynth", "DataQual", "Hservstat", "ValidFromDate", "ValidToDate", "CADKey", "AuditNodeID", "AuditDups", "AuditSpatial", "AuditOK2Go", "AuditProcTimestamp", "Qdes", "DME_GlobalID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MstLinksAcEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MstLinksAc) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MstLinksAc>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MstLinksAc);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MstLinksAc Entity 
		///</summary>
		protected virtual MstLinksAc Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MstLinksAc copy = new MstLinksAc();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MapinfoId = this.MapinfoId;
					copy.OriginalMapinfoId = this.OriginalMapinfoId;
				copy.MlinkId = this.MlinkId;
				copy.CompKey = this.CompKey;
				copy.UsNode = this.UsNode;
				copy.DsNode = this.DsNode;
				copy.PipeShape = this.PipeShape;
				copy.LinkType = this.LinkType;
				copy.PipeFlowType = this.PipeFlowType;
				copy.Length = this.Length;
				copy.DiamWidth = this.DiamWidth;
				copy.Height = this.Height;
				copy.Material = this.Material;
				copy.Upsdpth = this.Upsdpth;
				copy.Dwndpth = this.Dwndpth;
				copy.Usie = this.Usie;
				copy.Dsie = this.Dsie;
				copy.AsBuilt = this.AsBuilt;
				copy.Instdate = this.Instdate;
				copy.Fromx = this.Fromx;
				copy.Fromy = this.Fromy;
				copy.Tox = this.Tox;
				copy.Toy = this.Toy;
				copy.Roughness = this.Roughness;
				copy.TimeFrame = this.TimeFrame;
				copy.DataFlagSynth = this.DataFlagSynth;
				copy.DataQual = this.DataQual;
				copy.Hservstat = this.Hservstat;
				copy.ValidFromDate = this.ValidFromDate;
				copy.ValidToDate = this.ValidToDate;
				copy.CadKey = this.CadKey;
				copy.AuditNodeId = this.AuditNodeId;
				copy.AuditDups = this.AuditDups;
				copy.AuditSpatial = this.AuditSpatial;
				copy.AuditOk2Go = this.AuditOk2Go;
				copy.AuditProcTimestamp = this.AuditProcTimestamp;
				copy.Qdes = this.Qdes;
				copy.DmeGlobalId = this.DmeGlobalId;
			
			if (this.DsNodeSource != null && existingCopies.Contains(this.DsNodeSource))
				copy.DsNodeSource = existingCopies[this.DsNodeSource] as MstNodesAc;
			else
				copy.DsNodeSource = MakeCopyOf(this.DsNodeSource, existingCopies) as MstNodesAc;
			if (this.UsNodeSource != null && existingCopies.Contains(this.UsNodeSource))
				copy.UsNodeSource = existingCopies[this.UsNodeSource] as MstNodesAc;
			else
				copy.UsNodeSource = MakeCopyOf(this.UsNodeSource, existingCopies) as MstNodesAc;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MstLinksAc Entity 
		///</summary>
		public virtual MstLinksAc Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MstLinksAc Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MstLinksAc DeepCopy()
		{
			return EntityHelper.Clone<MstLinksAc>(this as MstLinksAc);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MstLinksAcEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MstLinksAcEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MstLinksAcEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MstLinksAcColumn column)
		{
			switch(column)
			{
					case MstLinksAcColumn.MapinfoId:
					return entityData.MapinfoId != _originalData.MapinfoId;
					case MstLinksAcColumn.MlinkId:
					return entityData.MlinkId != _originalData.MlinkId;
					case MstLinksAcColumn.CompKey:
					return entityData.CompKey != _originalData.CompKey;
					case MstLinksAcColumn.UsNode:
					return entityData.UsNode != _originalData.UsNode;
					case MstLinksAcColumn.DsNode:
					return entityData.DsNode != _originalData.DsNode;
					case MstLinksAcColumn.PipeShape:
					return entityData.PipeShape != _originalData.PipeShape;
					case MstLinksAcColumn.LinkType:
					return entityData.LinkType != _originalData.LinkType;
					case MstLinksAcColumn.PipeFlowType:
					return entityData.PipeFlowType != _originalData.PipeFlowType;
					case MstLinksAcColumn.Length:
					return entityData.Length != _originalData.Length;
					case MstLinksAcColumn.DiamWidth:
					return entityData.DiamWidth != _originalData.DiamWidth;
					case MstLinksAcColumn.Height:
					return entityData.Height != _originalData.Height;
					case MstLinksAcColumn.Material:
					return entityData.Material != _originalData.Material;
					case MstLinksAcColumn.Upsdpth:
					return entityData.Upsdpth != _originalData.Upsdpth;
					case MstLinksAcColumn.Dwndpth:
					return entityData.Dwndpth != _originalData.Dwndpth;
					case MstLinksAcColumn.Usie:
					return entityData.Usie != _originalData.Usie;
					case MstLinksAcColumn.Dsie:
					return entityData.Dsie != _originalData.Dsie;
					case MstLinksAcColumn.AsBuilt:
					return entityData.AsBuilt != _originalData.AsBuilt;
					case MstLinksAcColumn.Instdate:
					return entityData.Instdate != _originalData.Instdate;
					case MstLinksAcColumn.Fromx:
					return entityData.Fromx != _originalData.Fromx;
					case MstLinksAcColumn.Fromy:
					return entityData.Fromy != _originalData.Fromy;
					case MstLinksAcColumn.Tox:
					return entityData.Tox != _originalData.Tox;
					case MstLinksAcColumn.Toy:
					return entityData.Toy != _originalData.Toy;
					case MstLinksAcColumn.Roughness:
					return entityData.Roughness != _originalData.Roughness;
					case MstLinksAcColumn.TimeFrame:
					return entityData.TimeFrame != _originalData.TimeFrame;
					case MstLinksAcColumn.DataFlagSynth:
					return entityData.DataFlagSynth != _originalData.DataFlagSynth;
					case MstLinksAcColumn.DataQual:
					return entityData.DataQual != _originalData.DataQual;
					case MstLinksAcColumn.Hservstat:
					return entityData.Hservstat != _originalData.Hservstat;
					case MstLinksAcColumn.ValidFromDate:
					return entityData.ValidFromDate != _originalData.ValidFromDate;
					case MstLinksAcColumn.ValidToDate:
					return entityData.ValidToDate != _originalData.ValidToDate;
					case MstLinksAcColumn.CadKey:
					return entityData.CadKey != _originalData.CadKey;
					case MstLinksAcColumn.AuditNodeId:
					return entityData.AuditNodeId != _originalData.AuditNodeId;
					case MstLinksAcColumn.AuditDups:
					return entityData.AuditDups != _originalData.AuditDups;
					case MstLinksAcColumn.AuditSpatial:
					return entityData.AuditSpatial != _originalData.AuditSpatial;
					case MstLinksAcColumn.AuditOk2Go:
					return entityData.AuditOk2Go != _originalData.AuditOk2Go;
					case MstLinksAcColumn.AuditProcTimestamp:
					return entityData.AuditProcTimestamp != _originalData.AuditProcTimestamp;
					case MstLinksAcColumn.Qdes:
					return entityData.Qdes != _originalData.Qdes;
					case MstLinksAcColumn.DmeGlobalId:
					return entityData.DmeGlobalId != _originalData.DmeGlobalId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MstLinksAcColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MapinfoId != _originalData.MapinfoId;
			result = result || entityData.MlinkId != _originalData.MlinkId;
			result = result || entityData.CompKey != _originalData.CompKey;
			result = result || entityData.UsNode != _originalData.UsNode;
			result = result || entityData.DsNode != _originalData.DsNode;
			result = result || entityData.PipeShape != _originalData.PipeShape;
			result = result || entityData.LinkType != _originalData.LinkType;
			result = result || entityData.PipeFlowType != _originalData.PipeFlowType;
			result = result || entityData.Length != _originalData.Length;
			result = result || entityData.DiamWidth != _originalData.DiamWidth;
			result = result || entityData.Height != _originalData.Height;
			result = result || entityData.Material != _originalData.Material;
			result = result || entityData.Upsdpth != _originalData.Upsdpth;
			result = result || entityData.Dwndpth != _originalData.Dwndpth;
			result = result || entityData.Usie != _originalData.Usie;
			result = result || entityData.Dsie != _originalData.Dsie;
			result = result || entityData.AsBuilt != _originalData.AsBuilt;
			result = result || entityData.Instdate != _originalData.Instdate;
			result = result || entityData.Fromx != _originalData.Fromx;
			result = result || entityData.Fromy != _originalData.Fromy;
			result = result || entityData.Tox != _originalData.Tox;
			result = result || entityData.Toy != _originalData.Toy;
			result = result || entityData.Roughness != _originalData.Roughness;
			result = result || entityData.TimeFrame != _originalData.TimeFrame;
			result = result || entityData.DataFlagSynth != _originalData.DataFlagSynth;
			result = result || entityData.DataQual != _originalData.DataQual;
			result = result || entityData.Hservstat != _originalData.Hservstat;
			result = result || entityData.ValidFromDate != _originalData.ValidFromDate;
			result = result || entityData.ValidToDate != _originalData.ValidToDate;
			result = result || entityData.CadKey != _originalData.CadKey;
			result = result || entityData.AuditNodeId != _originalData.AuditNodeId;
			result = result || entityData.AuditDups != _originalData.AuditDups;
			result = result || entityData.AuditSpatial != _originalData.AuditSpatial;
			result = result || entityData.AuditOk2Go != _originalData.AuditOk2Go;
			result = result || entityData.AuditProcTimestamp != _originalData.AuditProcTimestamp;
			result = result || entityData.Qdes != _originalData.Qdes;
			result = result || entityData.DmeGlobalId != _originalData.DmeGlobalId;
			return result;
		}	
		
		///<summary>
		///  Returns a MstLinksAc Entity with the original data.
		///</summary>
		public MstLinksAc GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMstLinksAc(
				_originalData.MapinfoId,
				_originalData.MlinkId,
				_originalData.CompKey,
				_originalData.UsNode,
				_originalData.DsNode,
				_originalData.PipeShape,
				_originalData.LinkType,
				_originalData.PipeFlowType,
				_originalData.Length,
				_originalData.DiamWidth,
				_originalData.Height,
				_originalData.Material,
				_originalData.Upsdpth,
				_originalData.Dwndpth,
				_originalData.Usie,
				_originalData.Dsie,
				_originalData.AsBuilt,
				_originalData.Instdate,
				_originalData.Fromx,
				_originalData.Fromy,
				_originalData.Tox,
				_originalData.Toy,
				_originalData.Roughness,
				_originalData.TimeFrame,
				_originalData.DataFlagSynth,
				_originalData.DataQual,
				_originalData.Hservstat,
				_originalData.ValidFromDate,
				_originalData.ValidToDate,
				_originalData.CadKey,
				_originalData.AuditNodeId,
				_originalData.AuditDups,
				_originalData.AuditSpatial,
				_originalData.AuditOk2Go,
				_originalData.AuditProcTimestamp,
				_originalData.Qdes,
				_originalData.DmeGlobalId
				);
				
			return (MstLinksAc)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MstLinksAcBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MstLinksAcBase)
				return ValueEquals(this, (MstLinksAcBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MstLinksAcBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MapinfoId.GetHashCode() ^ 
					((this.MlinkId == null) ? string.Empty : this.MlinkId.ToString()).GetHashCode() ^ 
					((this.CompKey == null) ? string.Empty : this.CompKey.ToString()).GetHashCode() ^ 
					((this.UsNode == null) ? string.Empty : this.UsNode.ToString()).GetHashCode() ^ 
					((this.DsNode == null) ? string.Empty : this.DsNode.ToString()).GetHashCode() ^ 
					((this.PipeShape == null) ? string.Empty : this.PipeShape.ToString()).GetHashCode() ^ 
					((this.LinkType == null) ? string.Empty : this.LinkType.ToString()).GetHashCode() ^ 
					((this.PipeFlowType == null) ? string.Empty : this.PipeFlowType.ToString()).GetHashCode() ^ 
					((this.Length == null) ? string.Empty : this.Length.ToString()).GetHashCode() ^ 
					((this.DiamWidth == null) ? string.Empty : this.DiamWidth.ToString()).GetHashCode() ^ 
					((this.Height == null) ? string.Empty : this.Height.ToString()).GetHashCode() ^ 
					((this.Material == null) ? string.Empty : this.Material.ToString()).GetHashCode() ^ 
					((this.Upsdpth == null) ? string.Empty : this.Upsdpth.ToString()).GetHashCode() ^ 
					((this.Dwndpth == null) ? string.Empty : this.Dwndpth.ToString()).GetHashCode() ^ 
					((this.Usie == null) ? string.Empty : this.Usie.ToString()).GetHashCode() ^ 
					((this.Dsie == null) ? string.Empty : this.Dsie.ToString()).GetHashCode() ^ 
					((this.AsBuilt == null) ? string.Empty : this.AsBuilt.ToString()).GetHashCode() ^ 
					((this.Instdate == null) ? string.Empty : this.Instdate.ToString()).GetHashCode() ^ 
					((this.Fromx == null) ? string.Empty : this.Fromx.ToString()).GetHashCode() ^ 
					((this.Fromy == null) ? string.Empty : this.Fromy.ToString()).GetHashCode() ^ 
					((this.Tox == null) ? string.Empty : this.Tox.ToString()).GetHashCode() ^ 
					((this.Toy == null) ? string.Empty : this.Toy.ToString()).GetHashCode() ^ 
					((this.Roughness == null) ? string.Empty : this.Roughness.ToString()).GetHashCode() ^ 
					((this.TimeFrame == null) ? string.Empty : this.TimeFrame.ToString()).GetHashCode() ^ 
					((this.DataFlagSynth == null) ? string.Empty : this.DataFlagSynth.ToString()).GetHashCode() ^ 
					((this.DataQual == null) ? string.Empty : this.DataQual.ToString()).GetHashCode() ^ 
					((this.Hservstat == null) ? string.Empty : this.Hservstat.ToString()).GetHashCode() ^ 
					((this.ValidFromDate == null) ? string.Empty : this.ValidFromDate.ToString()).GetHashCode() ^ 
					((this.ValidToDate == null) ? string.Empty : this.ValidToDate.ToString()).GetHashCode() ^ 
					((this.CadKey == null) ? string.Empty : this.CadKey.ToString()).GetHashCode() ^ 
					((this.AuditNodeId == null) ? string.Empty : this.AuditNodeId.ToString()).GetHashCode() ^ 
					((this.AuditDups == null) ? string.Empty : this.AuditDups.ToString()).GetHashCode() ^ 
					((this.AuditSpatial == null) ? string.Empty : this.AuditSpatial.ToString()).GetHashCode() ^ 
					this.AuditOk2Go.GetHashCode() ^ 
					((this.AuditProcTimestamp == null) ? string.Empty : this.AuditProcTimestamp.ToString()).GetHashCode() ^ 
					((this.Qdes == null) ? string.Empty : this.Qdes.ToString()).GetHashCode() ^ 
					((this.DmeGlobalId == null) ? string.Empty : this.DmeGlobalId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MstLinksAcBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MstLinksAcBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MstLinksAcBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MstLinksAcBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MstLinksAcBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MstLinksAcBase Object1, MstLinksAcBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MapinfoId != Object2.MapinfoId)
				equal = false;
			if ( Object1.MlinkId != null && Object2.MlinkId != null )
			{
				if (Object1.MlinkId != Object2.MlinkId)
					equal = false;
			}
			else if (Object1.MlinkId == null ^ Object2.MlinkId == null )
			{
				equal = false;
			}
			if ( Object1.CompKey != null && Object2.CompKey != null )
			{
				if (Object1.CompKey != Object2.CompKey)
					equal = false;
			}
			else if (Object1.CompKey == null ^ Object2.CompKey == null )
			{
				equal = false;
			}
			if ( Object1.UsNode != null && Object2.UsNode != null )
			{
				if (Object1.UsNode != Object2.UsNode)
					equal = false;
			}
			else if (Object1.UsNode == null ^ Object2.UsNode == null )
			{
				equal = false;
			}
			if ( Object1.DsNode != null && Object2.DsNode != null )
			{
				if (Object1.DsNode != Object2.DsNode)
					equal = false;
			}
			else if (Object1.DsNode == null ^ Object2.DsNode == null )
			{
				equal = false;
			}
			if ( Object1.PipeShape != null && Object2.PipeShape != null )
			{
				if (Object1.PipeShape != Object2.PipeShape)
					equal = false;
			}
			else if (Object1.PipeShape == null ^ Object2.PipeShape == null )
			{
				equal = false;
			}
			if ( Object1.LinkType != null && Object2.LinkType != null )
			{
				if (Object1.LinkType != Object2.LinkType)
					equal = false;
			}
			else if (Object1.LinkType == null ^ Object2.LinkType == null )
			{
				equal = false;
			}
			if ( Object1.PipeFlowType != null && Object2.PipeFlowType != null )
			{
				if (Object1.PipeFlowType != Object2.PipeFlowType)
					equal = false;
			}
			else if (Object1.PipeFlowType == null ^ Object2.PipeFlowType == null )
			{
				equal = false;
			}
			if ( Object1.Length != null && Object2.Length != null )
			{
				if (Object1.Length != Object2.Length)
					equal = false;
			}
			else if (Object1.Length == null ^ Object2.Length == null )
			{
				equal = false;
			}
			if ( Object1.DiamWidth != null && Object2.DiamWidth != null )
			{
				if (Object1.DiamWidth != Object2.DiamWidth)
					equal = false;
			}
			else if (Object1.DiamWidth == null ^ Object2.DiamWidth == null )
			{
				equal = false;
			}
			if ( Object1.Height != null && Object2.Height != null )
			{
				if (Object1.Height != Object2.Height)
					equal = false;
			}
			else if (Object1.Height == null ^ Object2.Height == null )
			{
				equal = false;
			}
			if ( Object1.Material != null && Object2.Material != null )
			{
				if (Object1.Material != Object2.Material)
					equal = false;
			}
			else if (Object1.Material == null ^ Object2.Material == null )
			{
				equal = false;
			}
			if ( Object1.Upsdpth != null && Object2.Upsdpth != null )
			{
				if (Object1.Upsdpth != Object2.Upsdpth)
					equal = false;
			}
			else if (Object1.Upsdpth == null ^ Object2.Upsdpth == null )
			{
				equal = false;
			}
			if ( Object1.Dwndpth != null && Object2.Dwndpth != null )
			{
				if (Object1.Dwndpth != Object2.Dwndpth)
					equal = false;
			}
			else if (Object1.Dwndpth == null ^ Object2.Dwndpth == null )
			{
				equal = false;
			}
			if ( Object1.Usie != null && Object2.Usie != null )
			{
				if (Object1.Usie != Object2.Usie)
					equal = false;
			}
			else if (Object1.Usie == null ^ Object2.Usie == null )
			{
				equal = false;
			}
			if ( Object1.Dsie != null && Object2.Dsie != null )
			{
				if (Object1.Dsie != Object2.Dsie)
					equal = false;
			}
			else if (Object1.Dsie == null ^ Object2.Dsie == null )
			{
				equal = false;
			}
			if ( Object1.AsBuilt != null && Object2.AsBuilt != null )
			{
				if (Object1.AsBuilt != Object2.AsBuilt)
					equal = false;
			}
			else if (Object1.AsBuilt == null ^ Object2.AsBuilt == null )
			{
				equal = false;
			}
			if ( Object1.Instdate != null && Object2.Instdate != null )
			{
				if (Object1.Instdate != Object2.Instdate)
					equal = false;
			}
			else if (Object1.Instdate == null ^ Object2.Instdate == null )
			{
				equal = false;
			}
			if ( Object1.Fromx != null && Object2.Fromx != null )
			{
				if (Object1.Fromx != Object2.Fromx)
					equal = false;
			}
			else if (Object1.Fromx == null ^ Object2.Fromx == null )
			{
				equal = false;
			}
			if ( Object1.Fromy != null && Object2.Fromy != null )
			{
				if (Object1.Fromy != Object2.Fromy)
					equal = false;
			}
			else if (Object1.Fromy == null ^ Object2.Fromy == null )
			{
				equal = false;
			}
			if ( Object1.Tox != null && Object2.Tox != null )
			{
				if (Object1.Tox != Object2.Tox)
					equal = false;
			}
			else if (Object1.Tox == null ^ Object2.Tox == null )
			{
				equal = false;
			}
			if ( Object1.Toy != null && Object2.Toy != null )
			{
				if (Object1.Toy != Object2.Toy)
					equal = false;
			}
			else if (Object1.Toy == null ^ Object2.Toy == null )
			{
				equal = false;
			}
			if ( Object1.Roughness != null && Object2.Roughness != null )
			{
				if (Object1.Roughness != Object2.Roughness)
					equal = false;
			}
			else if (Object1.Roughness == null ^ Object2.Roughness == null )
			{
				equal = false;
			}
			if ( Object1.TimeFrame != null && Object2.TimeFrame != null )
			{
				if (Object1.TimeFrame != Object2.TimeFrame)
					equal = false;
			}
			else if (Object1.TimeFrame == null ^ Object2.TimeFrame == null )
			{
				equal = false;
			}
			if ( Object1.DataFlagSynth != null && Object2.DataFlagSynth != null )
			{
				if (Object1.DataFlagSynth != Object2.DataFlagSynth)
					equal = false;
			}
			else if (Object1.DataFlagSynth == null ^ Object2.DataFlagSynth == null )
			{
				equal = false;
			}
			if ( Object1.DataQual != null && Object2.DataQual != null )
			{
				if (Object1.DataQual != Object2.DataQual)
					equal = false;
			}
			else if (Object1.DataQual == null ^ Object2.DataQual == null )
			{
				equal = false;
			}
			if ( Object1.Hservstat != null && Object2.Hservstat != null )
			{
				if (Object1.Hservstat != Object2.Hservstat)
					equal = false;
			}
			else if (Object1.Hservstat == null ^ Object2.Hservstat == null )
			{
				equal = false;
			}
			if ( Object1.ValidFromDate != null && Object2.ValidFromDate != null )
			{
				if (Object1.ValidFromDate != Object2.ValidFromDate)
					equal = false;
			}
			else if (Object1.ValidFromDate == null ^ Object2.ValidFromDate == null )
			{
				equal = false;
			}
			if ( Object1.ValidToDate != null && Object2.ValidToDate != null )
			{
				if (Object1.ValidToDate != Object2.ValidToDate)
					equal = false;
			}
			else if (Object1.ValidToDate == null ^ Object2.ValidToDate == null )
			{
				equal = false;
			}
			if ( Object1.CadKey != null && Object2.CadKey != null )
			{
				if (Object1.CadKey != Object2.CadKey)
					equal = false;
			}
			else if (Object1.CadKey == null ^ Object2.CadKey == null )
			{
				equal = false;
			}
			if ( Object1.AuditNodeId != null && Object2.AuditNodeId != null )
			{
				if (Object1.AuditNodeId != Object2.AuditNodeId)
					equal = false;
			}
			else if (Object1.AuditNodeId == null ^ Object2.AuditNodeId == null )
			{
				equal = false;
			}
			if ( Object1.AuditDups != null && Object2.AuditDups != null )
			{
				if (Object1.AuditDups != Object2.AuditDups)
					equal = false;
			}
			else if (Object1.AuditDups == null ^ Object2.AuditDups == null )
			{
				equal = false;
			}
			if ( Object1.AuditSpatial != null && Object2.AuditSpatial != null )
			{
				if (Object1.AuditSpatial != Object2.AuditSpatial)
					equal = false;
			}
			else if (Object1.AuditSpatial == null ^ Object2.AuditSpatial == null )
			{
				equal = false;
			}
			if (Object1.AuditOk2Go != Object2.AuditOk2Go)
				equal = false;
			if ( Object1.AuditProcTimestamp != null && Object2.AuditProcTimestamp != null )
			{
				if (Object1.AuditProcTimestamp != Object2.AuditProcTimestamp)
					equal = false;
			}
			else if (Object1.AuditProcTimestamp == null ^ Object2.AuditProcTimestamp == null )
			{
				equal = false;
			}
			if ( Object1.Qdes != null && Object2.Qdes != null )
			{
				if (Object1.Qdes != Object2.Qdes)
					equal = false;
			}
			else if (Object1.Qdes == null ^ Object2.Qdes == null )
			{
				equal = false;
			}
			if ( Object1.DmeGlobalId != null && Object2.DmeGlobalId != null )
			{
				if (Object1.DmeGlobalId != Object2.DmeGlobalId)
					equal = false;
			}
			else if (Object1.DmeGlobalId == null ^ Object2.DmeGlobalId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MstLinksAcBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MstLinksAcComparer GetComparer()
        {
            return new MstLinksAcComparer();
        }
        */

        // Comparer delegates back to MstLinksAc
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MstLinksAc rhs, MstLinksAcColumn which)
        {
            switch (which)
            {
            	
            	
            	case MstLinksAcColumn.MapinfoId:
            		return this.MapinfoId.CompareTo(rhs.MapinfoId);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.MlinkId:
            		return this.MlinkId.Value.CompareTo(rhs.MlinkId.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.CompKey:
            		return this.CompKey.Value.CompareTo(rhs.CompKey.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.UsNode:
            		return this.UsNode.CompareTo(rhs.UsNode);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.DsNode:
            		return this.DsNode.CompareTo(rhs.DsNode);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.PipeShape:
            		return this.PipeShape.CompareTo(rhs.PipeShape);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.LinkType:
            		return this.LinkType.CompareTo(rhs.LinkType);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.PipeFlowType:
            		return this.PipeFlowType.CompareTo(rhs.PipeFlowType);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Length:
            		return this.Length.Value.CompareTo(rhs.Length.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.DiamWidth:
            		return this.DiamWidth.Value.CompareTo(rhs.DiamWidth.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Height:
            		return this.Height.Value.CompareTo(rhs.Height.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Material:
            		return this.Material.CompareTo(rhs.Material);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Upsdpth:
            		return this.Upsdpth.Value.CompareTo(rhs.Upsdpth.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Dwndpth:
            		return this.Dwndpth.Value.CompareTo(rhs.Dwndpth.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Usie:
            		return this.Usie.Value.CompareTo(rhs.Usie.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Dsie:
            		return this.Dsie.Value.CompareTo(rhs.Dsie.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.AsBuilt:
            		return this.AsBuilt.CompareTo(rhs.AsBuilt);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Instdate:
            		return this.Instdate.Value.CompareTo(rhs.Instdate.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Fromx:
            		return this.Fromx.Value.CompareTo(rhs.Fromx.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Fromy:
            		return this.Fromy.Value.CompareTo(rhs.Fromy.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Tox:
            		return this.Tox.Value.CompareTo(rhs.Tox.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Toy:
            		return this.Toy.Value.CompareTo(rhs.Toy.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Roughness:
            		return this.Roughness.Value.CompareTo(rhs.Roughness.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.TimeFrame:
            		return this.TimeFrame.CompareTo(rhs.TimeFrame);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.DataFlagSynth:
            		return this.DataFlagSynth.Value.CompareTo(rhs.DataFlagSynth.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.DataQual:
            		return this.DataQual.CompareTo(rhs.DataQual);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Hservstat:
            		return this.Hservstat.CompareTo(rhs.Hservstat);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.ValidFromDate:
            		return this.ValidFromDate.CompareTo(rhs.ValidFromDate);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.ValidToDate:
            		return this.ValidToDate.CompareTo(rhs.ValidToDate);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.CadKey:
            		return this.CadKey.CompareTo(rhs.CadKey);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.AuditNodeId:
            		return this.AuditNodeId.CompareTo(rhs.AuditNodeId);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.AuditDups:
            		return this.AuditDups.CompareTo(rhs.AuditDups);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.AuditSpatial:
            		return this.AuditSpatial.CompareTo(rhs.AuditSpatial);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.AuditOk2Go:
            		return this.AuditOk2Go.CompareTo(rhs.AuditOk2Go);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.AuditProcTimestamp:
            		return this.AuditProcTimestamp.CompareTo(rhs.AuditProcTimestamp);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.Qdes:
            		return this.Qdes.Value.CompareTo(rhs.Qdes.Value);
            		
            		                 
            	
            	
            	case MstLinksAcColumn.DmeGlobalId:
            		return this.DmeGlobalId.Value.CompareTo(rhs.DmeGlobalId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MstLinksAcKey> Members
		
		// member variable for the EntityId property
		private MstLinksAcKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MstLinksAcKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MstLinksAcKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MstLinksAc")
					.Append("|").Append( this.MapinfoId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{38}{37}- MapinfoId: {0}{37}- MlinkId: {1}{37}- CompKey: {2}{37}- UsNode: {3}{37}- DsNode: {4}{37}- PipeShape: {5}{37}- LinkType: {6}{37}- PipeFlowType: {7}{37}- Length: {8}{37}- DiamWidth: {9}{37}- Height: {10}{37}- Material: {11}{37}- Upsdpth: {12}{37}- Dwndpth: {13}{37}- Usie: {14}{37}- Dsie: {15}{37}- AsBuilt: {16}{37}- Instdate: {17}{37}- Fromx: {18}{37}- Fromy: {19}{37}- Tox: {20}{37}- Toy: {21}{37}- Roughness: {22}{37}- TimeFrame: {23}{37}- DataFlagSynth: {24}{37}- DataQual: {25}{37}- Hservstat: {26}{37}- ValidFromDate: {27}{37}- ValidToDate: {28}{37}- CadKey: {29}{37}- AuditNodeId: {30}{37}- AuditDups: {31}{37}- AuditSpatial: {32}{37}- AuditOk2Go: {33}{37}- AuditProcTimestamp: {34}{37}- Qdes: {35}{37}- DmeGlobalId: {36}{37}{39}", 
				this.MapinfoId,
				(this.MlinkId == null) ? string.Empty : this.MlinkId.ToString(),
				(this.CompKey == null) ? string.Empty : this.CompKey.ToString(),
				(this.UsNode == null) ? string.Empty : this.UsNode.ToString(),
				(this.DsNode == null) ? string.Empty : this.DsNode.ToString(),
				(this.PipeShape == null) ? string.Empty : this.PipeShape.ToString(),
				(this.LinkType == null) ? string.Empty : this.LinkType.ToString(),
				(this.PipeFlowType == null) ? string.Empty : this.PipeFlowType.ToString(),
				(this.Length == null) ? string.Empty : this.Length.ToString(),
				(this.DiamWidth == null) ? string.Empty : this.DiamWidth.ToString(),
				(this.Height == null) ? string.Empty : this.Height.ToString(),
				(this.Material == null) ? string.Empty : this.Material.ToString(),
				(this.Upsdpth == null) ? string.Empty : this.Upsdpth.ToString(),
				(this.Dwndpth == null) ? string.Empty : this.Dwndpth.ToString(),
				(this.Usie == null) ? string.Empty : this.Usie.ToString(),
				(this.Dsie == null) ? string.Empty : this.Dsie.ToString(),
				(this.AsBuilt == null) ? string.Empty : this.AsBuilt.ToString(),
				(this.Instdate == null) ? string.Empty : this.Instdate.ToString(),
				(this.Fromx == null) ? string.Empty : this.Fromx.ToString(),
				(this.Fromy == null) ? string.Empty : this.Fromy.ToString(),
				(this.Tox == null) ? string.Empty : this.Tox.ToString(),
				(this.Toy == null) ? string.Empty : this.Toy.ToString(),
				(this.Roughness == null) ? string.Empty : this.Roughness.ToString(),
				(this.TimeFrame == null) ? string.Empty : this.TimeFrame.ToString(),
				(this.DataFlagSynth == null) ? string.Empty : this.DataFlagSynth.ToString(),
				(this.DataQual == null) ? string.Empty : this.DataQual.ToString(),
				(this.Hservstat == null) ? string.Empty : this.Hservstat.ToString(),
				(this.ValidFromDate == null) ? string.Empty : this.ValidFromDate.ToString(),
				(this.ValidToDate == null) ? string.Empty : this.ValidToDate.ToString(),
				(this.CadKey == null) ? string.Empty : this.CadKey.ToString(),
				(this.AuditNodeId == null) ? string.Empty : this.AuditNodeId.ToString(),
				(this.AuditDups == null) ? string.Empty : this.AuditDups.ToString(),
				(this.AuditSpatial == null) ? string.Empty : this.AuditSpatial.ToString(),
				this.AuditOk2Go,
				(this.AuditProcTimestamp == null) ? string.Empty : this.AuditProcTimestamp.ToString(),
				(this.Qdes == null) ? string.Empty : this.Qdes.ToString(),
				(this.DmeGlobalId == null) ? string.Empty : this.DmeGlobalId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'mst_links_ac' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MstLinksAcEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MAPINFO_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "mst_links_ac"</remarks>
		public System.Int32 MapinfoId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalMapinfoId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MLinkID : 
		/// </summary>
		public System.Int32?		  MlinkId = null;
		
		/// <summary>
		/// CompKey : 
		/// </summary>
		public System.Int32?		  CompKey = null;
		
		/// <summary>
		/// USNode : 
		/// </summary>
		public System.String		  UsNode = null;
		
		/// <summary>
		/// DSNode : 
		/// </summary>
		public System.String		  DsNode = null;
		
		/// <summary>
		/// PipeShape : 
		/// </summary>
		public System.String		  PipeShape = null;
		
		/// <summary>
		/// LinkType : 
		/// </summary>
		public System.String		  LinkType = null;
		
		/// <summary>
		/// PipeFlowType : 
		/// </summary>
		public System.String		  PipeFlowType = null;
		
		/// <summary>
		/// Length : 
		/// </summary>
		public System.Double?		  Length = null;
		
		/// <summary>
		/// DiamWidth : 
		/// </summary>
		public System.Double?		  DiamWidth = null;
		
		/// <summary>
		/// Height : 
		/// </summary>
		public System.Double?		  Height = null;
		
		/// <summary>
		/// Material : 
		/// </summary>
		public System.String		  Material = null;
		
		/// <summary>
		/// upsdpth : 
		/// </summary>
		public System.Double?		  Upsdpth = null;
		
		/// <summary>
		/// dwndpth : 
		/// </summary>
		public System.Double?		  Dwndpth = null;
		
		/// <summary>
		/// USIE : 
		/// </summary>
		public System.Double?		  Usie = null;
		
		/// <summary>
		/// DSIE : 
		/// </summary>
		public System.Double?		  Dsie = null;
		
		/// <summary>
		/// AsBuilt : 
		/// </summary>
		public System.String		  AsBuilt = null;
		
		/// <summary>
		/// Instdate : 
		/// </summary>
		public System.DateTime?		  Instdate = null;
		
		/// <summary>
		/// FromX : 
		/// </summary>
		public System.Double?		  Fromx = null;
		
		/// <summary>
		/// FromY : 
		/// </summary>
		public System.Double?		  Fromy = null;
		
		/// <summary>
		/// ToX : 
		/// </summary>
		public System.Double?		  Tox = null;
		
		/// <summary>
		/// ToY : 
		/// </summary>
		public System.Double?		  Toy = null;
		
		/// <summary>
		/// Roughness : 
		/// </summary>
		public System.Double?		  Roughness = null;
		
		/// <summary>
		/// TimeFrame : 
		/// </summary>
		public System.String		  TimeFrame = null;
		
		/// <summary>
		/// DataFlagSynth : 
		/// </summary>
		public System.Int32?		  DataFlagSynth = null;
		
		/// <summary>
		/// DataQual : 
		/// </summary>
		public System.String		  DataQual = null;
		
		/// <summary>
		/// Hservstat : 
		/// </summary>
		public System.String		  Hservstat = null;
		
		/// <summary>
		/// ValidFromDate : 
		/// </summary>
		public System.String		  ValidFromDate = null;
		
		/// <summary>
		/// ValidToDate : 
		/// </summary>
		public System.String		  ValidToDate = null;
		
		/// <summary>
		/// CADKey : 
		/// </summary>
		public System.String		  CadKey = null;
		
		/// <summary>
		/// AuditNodeID : 
		/// </summary>
		public System.String		  AuditNodeId = null;
		
		/// <summary>
		/// AuditDups : 
		/// </summary>
		public System.String		  AuditDups = null;
		
		/// <summary>
		/// AuditSpatial : 
		/// </summary>
		public System.String		  AuditSpatial = null;
		
		/// <summary>
		/// AuditOK2Go : 
		/// </summary>
		public System.Boolean		  AuditOk2Go = false;
		
		/// <summary>
		/// AuditProcTimestamp : 
		/// </summary>
		public System.String		  AuditProcTimestamp = null;
		
		/// <summary>
		/// Qdes : 
		/// </summary>
		public System.Double?		  Qdes = null;
		
		/// <summary>
		/// DME_GlobalID : 
		/// </summary>
		public System.Int32?		  DmeGlobalId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private MstNodesAc _dsNodeSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MstNodesAc"/>.
		/// </summary>
		/// <value>The source MstNodesAc for DsNode.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MstNodesAc DsNodeSource
      	{
            get { return this._dsNodeSource; }
            set { this._dsNodeSource = value; }
      	}
		private MstNodesAc _usNodeSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MstNodesAc"/>.
		/// </summary>
		/// <value>The source MstNodesAc for UsNode.</value>
		[XmlIgnore()]
		[Browsable(false)]
		public virtual MstNodesAc UsNodeSource
      	{
            get { return this._usNodeSource; }
            set { this._usNodeSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MstLinksAcEntityData _tmp = new MstLinksAcEntityData();
						
			_tmp.MapinfoId = this.MapinfoId;
			_tmp.OriginalMapinfoId = this.OriginalMapinfoId;
			
			_tmp.MlinkId = this.MlinkId;
			_tmp.CompKey = this.CompKey;
			_tmp.UsNode = this.UsNode;
			_tmp.DsNode = this.DsNode;
			_tmp.PipeShape = this.PipeShape;
			_tmp.LinkType = this.LinkType;
			_tmp.PipeFlowType = this.PipeFlowType;
			_tmp.Length = this.Length;
			_tmp.DiamWidth = this.DiamWidth;
			_tmp.Height = this.Height;
			_tmp.Material = this.Material;
			_tmp.Upsdpth = this.Upsdpth;
			_tmp.Dwndpth = this.Dwndpth;
			_tmp.Usie = this.Usie;
			_tmp.Dsie = this.Dsie;
			_tmp.AsBuilt = this.AsBuilt;
			_tmp.Instdate = this.Instdate;
			_tmp.Fromx = this.Fromx;
			_tmp.Fromy = this.Fromy;
			_tmp.Tox = this.Tox;
			_tmp.Toy = this.Toy;
			_tmp.Roughness = this.Roughness;
			_tmp.TimeFrame = this.TimeFrame;
			_tmp.DataFlagSynth = this.DataFlagSynth;
			_tmp.DataQual = this.DataQual;
			_tmp.Hservstat = this.Hservstat;
			_tmp.ValidFromDate = this.ValidFromDate;
			_tmp.ValidToDate = this.ValidToDate;
			_tmp.CadKey = this.CadKey;
			_tmp.AuditNodeId = this.AuditNodeId;
			_tmp.AuditDups = this.AuditDups;
			_tmp.AuditSpatial = this.AuditSpatial;
			_tmp.AuditOk2Go = this.AuditOk2Go;
			_tmp.AuditProcTimestamp = this.AuditProcTimestamp;
			_tmp.Qdes = this.Qdes;
			_tmp.DmeGlobalId = this.DmeGlobalId;
			
			#region Source Parent Composite Entities
			if (this.DsNodeSource != null)
				_tmp.DsNodeSource = MakeCopyOf(this.DsNodeSource) as MstNodesAc;
			if (this.UsNodeSource != null)
				_tmp.UsNodeSource = MakeCopyOf(this.UsNodeSource) as MstNodesAc;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MstLinksAcEntityData _tmp = new MstLinksAcEntityData();
						
			_tmp.MapinfoId = this.MapinfoId;
			_tmp.OriginalMapinfoId = this.OriginalMapinfoId;
			
			_tmp.MlinkId = this.MlinkId;
			_tmp.CompKey = this.CompKey;
			_tmp.UsNode = this.UsNode;
			_tmp.DsNode = this.DsNode;
			_tmp.PipeShape = this.PipeShape;
			_tmp.LinkType = this.LinkType;
			_tmp.PipeFlowType = this.PipeFlowType;
			_tmp.Length = this.Length;
			_tmp.DiamWidth = this.DiamWidth;
			_tmp.Height = this.Height;
			_tmp.Material = this.Material;
			_tmp.Upsdpth = this.Upsdpth;
			_tmp.Dwndpth = this.Dwndpth;
			_tmp.Usie = this.Usie;
			_tmp.Dsie = this.Dsie;
			_tmp.AsBuilt = this.AsBuilt;
			_tmp.Instdate = this.Instdate;
			_tmp.Fromx = this.Fromx;
			_tmp.Fromy = this.Fromy;
			_tmp.Tox = this.Tox;
			_tmp.Toy = this.Toy;
			_tmp.Roughness = this.Roughness;
			_tmp.TimeFrame = this.TimeFrame;
			_tmp.DataFlagSynth = this.DataFlagSynth;
			_tmp.DataQual = this.DataQual;
			_tmp.Hservstat = this.Hservstat;
			_tmp.ValidFromDate = this.ValidFromDate;
			_tmp.ValidToDate = this.ValidToDate;
			_tmp.CadKey = this.CadKey;
			_tmp.AuditNodeId = this.AuditNodeId;
			_tmp.AuditDups = this.AuditDups;
			_tmp.AuditSpatial = this.AuditSpatial;
			_tmp.AuditOk2Go = this.AuditOk2Go;
			_tmp.AuditProcTimestamp = this.AuditProcTimestamp;
			_tmp.Qdes = this.Qdes;
			_tmp.DmeGlobalId = this.DmeGlobalId;
			
			#region Source Parent Composite Entities
			if (this.DsNodeSource != null && existingCopies.Contains(this.DsNodeSource))
				_tmp.DsNodeSource = existingCopies[this.DsNodeSource] as MstNodesAc;
			else
				_tmp.DsNodeSource = MakeCopyOf(this.DsNodeSource, existingCopies) as MstNodesAc;
			if (this.UsNodeSource != null && existingCopies.Contains(this.UsNodeSource))
				_tmp.UsNodeSource = existingCopies[this.UsNodeSource] as MstNodesAc;
			else
				_tmp.UsNodeSource = MakeCopyOf(this.UsNodeSource, existingCopies) as MstNodesAc;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MstLinksAcColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MstLinksAcColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MstLinksAcColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MstLinksAcColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MstLinksAcColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MstLinksAcColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MstLinksAcEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MstLinksAcEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MstLinksAcColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MstLinksAcColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MstLinksAcEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MstLinksAcEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MstLinksAcEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MstLinksAc"/> object.
	/// </remarks>
	public class MstLinksAcEventArgs : System.EventArgs
	{
		private MstLinksAcColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MstLinksAcEventArgs class.
		///</summary>
		public MstLinksAcEventArgs(MstLinksAcColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MstLinksAcEventArgs class.
		///</summary>
		public MstLinksAcEventArgs(MstLinksAcColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MstLinksAcColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MstLinksAcColumn" />
		public MstLinksAcColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MstLinksAc related events.
	///</summary>
	public delegate void MstLinksAcEventHandler(object sender, MstLinksAcEventArgs e);
	
	#region MstLinksAcComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MstLinksAcComparer : System.Collections.Generic.IComparer<MstLinksAc>
	{
		MstLinksAcColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MstLinksAcComparer"/> class.
        /// </summary>
		public MstLinksAcComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MstLinksAcComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MstLinksAcComparer(MstLinksAcColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MstLinksAc"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MstLinksAc"/> to compare.</param>
        /// <param name="b">The second <c>MstLinksAc</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MstLinksAc a, MstLinksAc b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MstLinksAc entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MstLinksAc a, MstLinksAc b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MstLinksAcColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MstLinksAcKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MstLinksAc"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MstLinksAcKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MstLinksAcKey class.
		/// </summary>
		public MstLinksAcKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MstLinksAcKey class.
		/// </summary>
		public MstLinksAcKey(MstLinksAcBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MapinfoId = entity.MapinfoId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MstLinksAcKey class.
		/// </summary>
		public MstLinksAcKey(System.Int32 _mapinfoId)
		{
			#region Init Properties

			this.MapinfoId = _mapinfoId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MstLinksAcBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MstLinksAcBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MapinfoId property
		private System.Int32 _mapinfoId;
		
		/// <summary>
		/// Gets or sets the MapinfoId property.
		/// </summary>
		public System.Int32 MapinfoId
		{
			get { return _mapinfoId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MapinfoId = value;
				
				_mapinfoId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MapinfoId = ( values["MapinfoId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MapinfoId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MapinfoId", MapinfoId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MapinfoId: {0}{1}",
								MapinfoId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MstLinksAcColumn Enum
	
	/// <summary>
	/// Enumerate the MstLinksAc columns.
	/// </summary>
	[Serializable]
	public enum MstLinksAcColumn : int
	{
		/// <summary>
		/// MapinfoId : 
		/// </summary>
		[EnumTextValue("MAPINFO_ID")]
		[ColumnEnum("MAPINFO_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		MapinfoId = 1,
		/// <summary>
		/// MlinkId : 
		/// </summary>
		[EnumTextValue("MLinkID")]
		[ColumnEnum("MLinkID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MlinkId = 2,
		/// <summary>
		/// CompKey : 
		/// </summary>
		[EnumTextValue("CompKey")]
		[ColumnEnum("CompKey", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CompKey = 3,
		/// <summary>
		/// UsNode : 
		/// </summary>
		[EnumTextValue("USNode")]
		[ColumnEnum("USNode", typeof(System.String), System.Data.DbType.String, false, false, true, 6)]
		UsNode = 4,
		/// <summary>
		/// DsNode : 
		/// </summary>
		[EnumTextValue("DSNode")]
		[ColumnEnum("DSNode", typeof(System.String), System.Data.DbType.String, false, false, true, 6)]
		DsNode = 5,
		/// <summary>
		/// PipeShape : 
		/// </summary>
		[EnumTextValue("PipeShape")]
		[ColumnEnum("PipeShape", typeof(System.String), System.Data.DbType.String, false, false, true, 4)]
		PipeShape = 6,
		/// <summary>
		/// LinkType : 
		/// </summary>
		[EnumTextValue("LinkType")]
		[ColumnEnum("LinkType", typeof(System.String), System.Data.DbType.String, false, false, true, 2)]
		LinkType = 7,
		/// <summary>
		/// PipeFlowType : 
		/// </summary>
		[EnumTextValue("PipeFlowType")]
		[ColumnEnum("PipeFlowType", typeof(System.String), System.Data.DbType.String, false, false, true, 1)]
		PipeFlowType = 8,
		/// <summary>
		/// Length : 
		/// </summary>
		[EnumTextValue("Length")]
		[ColumnEnum("Length", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Length = 9,
		/// <summary>
		/// DiamWidth : 
		/// </summary>
		[EnumTextValue("DiamWidth")]
		[ColumnEnum("DiamWidth", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		DiamWidth = 10,
		/// <summary>
		/// Height : 
		/// </summary>
		[EnumTextValue("Height")]
		[ColumnEnum("Height", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Height = 11,
		/// <summary>
		/// Material : 
		/// </summary>
		[EnumTextValue("Material")]
		[ColumnEnum("Material", typeof(System.String), System.Data.DbType.String, false, false, true, 6)]
		Material = 12,
		/// <summary>
		/// Upsdpth : 
		/// </summary>
		[EnumTextValue("upsdpth")]
		[ColumnEnum("upsdpth", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Upsdpth = 13,
		/// <summary>
		/// Dwndpth : 
		/// </summary>
		[EnumTextValue("dwndpth")]
		[ColumnEnum("dwndpth", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Dwndpth = 14,
		/// <summary>
		/// Usie : 
		/// </summary>
		[EnumTextValue("USIE")]
		[ColumnEnum("USIE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Usie = 15,
		/// <summary>
		/// Dsie : 
		/// </summary>
		[EnumTextValue("DSIE")]
		[ColumnEnum("DSIE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Dsie = 16,
		/// <summary>
		/// AsBuilt : 
		/// </summary>
		[EnumTextValue("AsBuilt")]
		[ColumnEnum("AsBuilt", typeof(System.String), System.Data.DbType.String, false, false, true, 14)]
		AsBuilt = 17,
		/// <summary>
		/// Instdate : 
		/// </summary>
		[EnumTextValue("Instdate")]
		[ColumnEnum("Instdate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Instdate = 18,
		/// <summary>
		/// Fromx : 
		/// </summary>
		[EnumTextValue("FromX")]
		[ColumnEnum("FromX", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Fromx = 19,
		/// <summary>
		/// Fromy : 
		/// </summary>
		[EnumTextValue("FromY")]
		[ColumnEnum("FromY", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Fromy = 20,
		/// <summary>
		/// Tox : 
		/// </summary>
		[EnumTextValue("ToX")]
		[ColumnEnum("ToX", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Tox = 21,
		/// <summary>
		/// Toy : 
		/// </summary>
		[EnumTextValue("ToY")]
		[ColumnEnum("ToY", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Toy = 22,
		/// <summary>
		/// Roughness : 
		/// </summary>
		[EnumTextValue("Roughness")]
		[ColumnEnum("Roughness", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Roughness = 23,
		/// <summary>
		/// TimeFrame : 
		/// </summary>
		[EnumTextValue("TimeFrame")]
		[ColumnEnum("TimeFrame", typeof(System.String), System.Data.DbType.String, false, false, true, 2)]
		TimeFrame = 24,
		/// <summary>
		/// DataFlagSynth : 
		/// </summary>
		[EnumTextValue("DataFlagSynth")]
		[ColumnEnum("DataFlagSynth", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DataFlagSynth = 25,
		/// <summary>
		/// DataQual : 
		/// </summary>
		[EnumTextValue("DataQual")]
		[ColumnEnum("DataQual", typeof(System.String), System.Data.DbType.String, false, false, true, 15)]
		DataQual = 26,
		/// <summary>
		/// Hservstat : 
		/// </summary>
		[EnumTextValue("Hservstat")]
		[ColumnEnum("Hservstat", typeof(System.String), System.Data.DbType.String, false, false, true, 4)]
		Hservstat = 27,
		/// <summary>
		/// ValidFromDate : 
		/// </summary>
		[EnumTextValue("ValidFromDate")]
		[ColumnEnum("ValidFromDate", typeof(System.String), System.Data.DbType.String, false, false, true, 8)]
		ValidFromDate = 28,
		/// <summary>
		/// ValidToDate : 
		/// </summary>
		[EnumTextValue("ValidToDate")]
		[ColumnEnum("ValidToDate", typeof(System.String), System.Data.DbType.String, false, false, true, 8)]
		ValidToDate = 29,
		/// <summary>
		/// CadKey : 
		/// </summary>
		[EnumTextValue("CADKey")]
		[ColumnEnum("CADKey", typeof(System.String), System.Data.DbType.String, false, false, true, 14)]
		CadKey = 30,
		/// <summary>
		/// AuditNodeId : 
		/// </summary>
		[EnumTextValue("AuditNodeID")]
		[ColumnEnum("AuditNodeID", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		AuditNodeId = 31,
		/// <summary>
		/// AuditDups : 
		/// </summary>
		[EnumTextValue("AuditDups")]
		[ColumnEnum("AuditDups", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		AuditDups = 32,
		/// <summary>
		/// AuditSpatial : 
		/// </summary>
		[EnumTextValue("AuditSpatial")]
		[ColumnEnum("AuditSpatial", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		AuditSpatial = 33,
		/// <summary>
		/// AuditOk2Go : 
		/// </summary>
		[EnumTextValue("AuditOK2Go")]
		[ColumnEnum("AuditOK2Go", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		AuditOk2Go = 34,
		/// <summary>
		/// AuditProcTimestamp : 
		/// </summary>
		[EnumTextValue("AuditProcTimestamp")]
		[ColumnEnum("AuditProcTimestamp", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		AuditProcTimestamp = 35,
		/// <summary>
		/// Qdes : 
		/// </summary>
		[EnumTextValue("Qdes")]
		[ColumnEnum("Qdes", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Qdes = 36,
		/// <summary>
		/// DmeGlobalId : 
		/// </summary>
		[EnumTextValue("DME_GlobalID")]
		[ColumnEnum("DME_GlobalID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DmeGlobalId = 37
	}//End enum

	#endregion MstLinksAcColumn Enum

} // end namespace
