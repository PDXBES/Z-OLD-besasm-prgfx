
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file MstNodesAc.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using SAMaster.Entities.Validation;
#endregion

namespace SAMaster.Entities
{
	///<summary>
	/// An object representation of the 'mst_nodes_ac' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MstNodesAcBase : EntityBase, IMstNodesAc, IEntityId<MstNodesAcKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MstNodesAcEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MstNodesAcEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MstNodesAcEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MstNodesAc> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MstNodesAcEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MstNodesAcEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MstNodesAcBase"/> instance.
		///</summary>
		public MstNodesAcBase()
		{
			this.entityData = new MstNodesAcEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MstNodesAcBase"/> instance.
		///</summary>
		///<param name="_mapinfoId"></param>
		///<param name="_node"></param>
		///<param name="_xcoord"></param>
		///<param name="_ycoord"></param>
		///<param name="_nodeType"></param>
		///<param name="_grndElev"></param>
		///<param name="_hasSpecNode"></param>
		///<param name="_hasSpecLink"></param>
		///<param name="_gageId"></param>
		///<param name="_dmeGlobalId"></param>
		public MstNodesAcBase(System.Int32 _mapinfoId, System.String _node, System.Double? _xcoord, 
			System.Double? _ycoord, System.String _nodeType, System.Double? _grndElev, System.String _hasSpecNode, 
			System.String _hasSpecLink, System.String _gageId, System.Int32? _dmeGlobalId)
		{
			this.entityData = new MstNodesAcEntityData();
			this.backupData = null;

			this.MapinfoId = _mapinfoId;
			this.Node = _node;
			this.Xcoord = _xcoord;
			this.Ycoord = _ycoord;
			this.NodeType = _nodeType;
			this.GrndElev = _grndElev;
			this.HasSpecNode = _hasSpecNode;
			this.HasSpecLink = _hasSpecLink;
			this.GageId = _gageId;
			this.DmeGlobalId = _dmeGlobalId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MstNodesAc"/> instance.
		///</summary>
		///<param name="_mapinfoId"></param>
		///<param name="_node"></param>
		///<param name="_xcoord"></param>
		///<param name="_ycoord"></param>
		///<param name="_nodeType"></param>
		///<param name="_grndElev"></param>
		///<param name="_hasSpecNode"></param>
		///<param name="_hasSpecLink"></param>
		///<param name="_gageId"></param>
		///<param name="_dmeGlobalId"></param>
		public static MstNodesAc CreateMstNodesAc(System.Int32 _mapinfoId, System.String _node, System.Double? _xcoord, 
			System.Double? _ycoord, System.String _nodeType, System.Double? _grndElev, System.String _hasSpecNode, 
			System.String _hasSpecLink, System.String _gageId, System.Int32? _dmeGlobalId)
		{
			MstNodesAc newMstNodesAc = new MstNodesAc();
			newMstNodesAc.MapinfoId = _mapinfoId;
			newMstNodesAc.Node = _node;
			newMstNodesAc.Xcoord = _xcoord;
			newMstNodesAc.Ycoord = _ycoord;
			newMstNodesAc.NodeType = _nodeType;
			newMstNodesAc.GrndElev = _grndElev;
			newMstNodesAc.HasSpecNode = _hasSpecNode;
			newMstNodesAc.HasSpecLink = _hasSpecLink;
			newMstNodesAc.GageId = _gageId;
			newMstNodesAc.DmeGlobalId = _dmeGlobalId;
			return newMstNodesAc;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MapinfoId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public override System.Int32 MapinfoId
		{
			get
			{
				return this.entityData.MapinfoId; 
			}
			
			set
			{
				if (this.entityData.MapinfoId == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.MapinfoId, this.entityData.MapinfoId);
				this.entityData.MapinfoId = value;
				this.EntityId.MapinfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.MapinfoId, this.entityData.MapinfoId);
				OnPropertyChanged("MapinfoId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MAPINFO_ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MAPINFO_ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalMapinfoId
		{
			get { return this.entityData.OriginalMapinfoId; }
			set { this.entityData.OriginalMapinfoId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Node property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 6)]
		public virtual System.String Node
		{
			get
			{
				return this.entityData.Node; 
			}
			
			set
			{
				if (this.entityData.Node == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.Node, this.entityData.Node);
				this.entityData.Node = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.Node, this.entityData.Node);
				OnPropertyChanged("Node");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Xcoord property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsXcoordNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Xcoord
		{
			get
			{
				return this.entityData.Xcoord; 
			}
			
			set
			{
				if (this.entityData.Xcoord == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.Xcoord, this.entityData.Xcoord);
				this.entityData.Xcoord = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.Xcoord, this.entityData.Xcoord);
				OnPropertyChanged("Xcoord");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ycoord property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsYcoordNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Ycoord
		{
			get
			{
				return this.entityData.Ycoord; 
			}
			
			set
			{
				if (this.entityData.Ycoord == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.Ycoord, this.entityData.Ycoord);
				this.entityData.Ycoord = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.Ycoord, this.entityData.Ycoord);
				OnPropertyChanged("Ycoord");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NodeType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4)]
		public virtual System.String NodeType
		{
			get
			{
				return this.entityData.NodeType; 
			}
			
			set
			{
				if (this.entityData.NodeType == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.NodeType, this.entityData.NodeType);
				this.entityData.NodeType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.NodeType, this.entityData.NodeType);
				OnPropertyChanged("NodeType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrndElev property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsGrndElevNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? GrndElev
		{
			get
			{
				return this.entityData.GrndElev; 
			}
			
			set
			{
				if (this.entityData.GrndElev == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.GrndElev, this.entityData.GrndElev);
				this.entityData.GrndElev = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.GrndElev, this.entityData.GrndElev);
				OnPropertyChanged("GrndElev");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HasSpecNode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String HasSpecNode
		{
			get
			{
				return this.entityData.HasSpecNode; 
			}
			
			set
			{
				if (this.entityData.HasSpecNode == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.HasSpecNode, this.entityData.HasSpecNode);
				this.entityData.HasSpecNode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.HasSpecNode, this.entityData.HasSpecNode);
				OnPropertyChanged("HasSpecNode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HasSpecLink property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String HasSpecLink
		{
			get
			{
				return this.entityData.HasSpecLink; 
			}
			
			set
			{
				if (this.entityData.HasSpecLink == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.HasSpecLink, this.entityData.HasSpecLink);
				this.entityData.HasSpecLink = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.HasSpecLink, this.entityData.HasSpecLink);
				OnPropertyChanged("HasSpecLink");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GageId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8)]
		public virtual System.String GageId
		{
			get
			{
				return this.entityData.GageId; 
			}
			
			set
			{
				if (this.entityData.GageId == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.GageId, this.entityData.GageId);
				this.entityData.GageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.GageId, this.entityData.GageId);
				OnPropertyChanged("GageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DmeGlobalId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDmeGlobalIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Int32? DmeGlobalId
		{
			get
			{
				return this.entityData.DmeGlobalId; 
			}
			
			set
			{
				if (this.entityData.DmeGlobalId == value)
					return;
					
				OnColumnChanging(MstNodesAcColumn.DmeGlobalId, this.entityData.DmeGlobalId);
				this.entityData.DmeGlobalId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MstNodesAcColumn.DmeGlobalId, this.entityData.DmeGlobalId);
				OnPropertyChanged("DmeGlobalId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of MstLinksAc objects
		///	which are related to this object through the relation FK_mst_links_ac_DSmst_nodes_ac
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MstLinksAc> MstLinksAcCollectionGetByDsNode
		{
			get { return entityData.MstLinksAcCollectionGetByDsNode; }
			set { entityData.MstLinksAcCollectionGetByDsNode = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MstLinksAc objects
		///	which are related to this object through the relation FK_mst_links_ac_USmst_nodes_ac
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MstLinksAc> MstLinksAcCollectionGetByUsNode
		{
			get { return entityData.MstLinksAcCollectionGetByUsNode; }
			set { entityData.MstLinksAcCollectionGetByUsNode = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Node", "Node"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Node", "Node", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("NodeType", "Node Type", 4));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HasSpecNode", "Has Spec Node", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HasSpecLink", "Has Spec Link", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GageId", "Gage Id", 8));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "mst_nodes_ac"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MAPINFO_ID", "Node", "XCoord", "YCoord", "NodeType", "GrndElev", "HasSpecNode", "HasSpecLink", "GageID", "DME_GlobalID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MstNodesAcEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MstNodesAc) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MstNodesAc>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MstNodesAc);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MstNodesAc Entity 
		///</summary>
		protected virtual MstNodesAc Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MstNodesAc copy = new MstNodesAc();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MapinfoId = this.MapinfoId;
					copy.OriginalMapinfoId = this.OriginalMapinfoId;
				copy.Node = this.Node;
				copy.Xcoord = this.Xcoord;
				copy.Ycoord = this.Ycoord;
				copy.NodeType = this.NodeType;
				copy.GrndElev = this.GrndElev;
				copy.HasSpecNode = this.HasSpecNode;
				copy.HasSpecLink = this.HasSpecLink;
				copy.GageId = this.GageId;
				copy.DmeGlobalId = this.DmeGlobalId;
			
		
			//deep copy nested objects
			copy.MstLinksAcCollectionGetByDsNode = (TList<MstLinksAc>) MakeCopyOf(this.MstLinksAcCollectionGetByDsNode, existingCopies); 
			copy.MstLinksAcCollectionGetByUsNode = (TList<MstLinksAc>) MakeCopyOf(this.MstLinksAcCollectionGetByUsNode, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MstNodesAc Entity 
		///</summary>
		public virtual MstNodesAc Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MstNodesAc Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MstNodesAc DeepCopy()
		{
			return EntityHelper.Clone<MstNodesAc>(this as MstNodesAc);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MstNodesAcEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MstNodesAcEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MstNodesAcEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MstNodesAcColumn column)
		{
			switch(column)
			{
					case MstNodesAcColumn.MapinfoId:
					return entityData.MapinfoId != _originalData.MapinfoId;
					case MstNodesAcColumn.Node:
					return entityData.Node != _originalData.Node;
					case MstNodesAcColumn.Xcoord:
					return entityData.Xcoord != _originalData.Xcoord;
					case MstNodesAcColumn.Ycoord:
					return entityData.Ycoord != _originalData.Ycoord;
					case MstNodesAcColumn.NodeType:
					return entityData.NodeType != _originalData.NodeType;
					case MstNodesAcColumn.GrndElev:
					return entityData.GrndElev != _originalData.GrndElev;
					case MstNodesAcColumn.HasSpecNode:
					return entityData.HasSpecNode != _originalData.HasSpecNode;
					case MstNodesAcColumn.HasSpecLink:
					return entityData.HasSpecLink != _originalData.HasSpecLink;
					case MstNodesAcColumn.GageId:
					return entityData.GageId != _originalData.GageId;
					case MstNodesAcColumn.DmeGlobalId:
					return entityData.DmeGlobalId != _originalData.DmeGlobalId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MstNodesAcColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MapinfoId != _originalData.MapinfoId;
			result = result || entityData.Node != _originalData.Node;
			result = result || entityData.Xcoord != _originalData.Xcoord;
			result = result || entityData.Ycoord != _originalData.Ycoord;
			result = result || entityData.NodeType != _originalData.NodeType;
			result = result || entityData.GrndElev != _originalData.GrndElev;
			result = result || entityData.HasSpecNode != _originalData.HasSpecNode;
			result = result || entityData.HasSpecLink != _originalData.HasSpecLink;
			result = result || entityData.GageId != _originalData.GageId;
			result = result || entityData.DmeGlobalId != _originalData.DmeGlobalId;
			return result;
		}	
		
		///<summary>
		///  Returns a MstNodesAc Entity with the original data.
		///</summary>
		public MstNodesAc GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMstNodesAc(
				_originalData.MapinfoId,
				_originalData.Node,
				_originalData.Xcoord,
				_originalData.Ycoord,
				_originalData.NodeType,
				_originalData.GrndElev,
				_originalData.HasSpecNode,
				_originalData.HasSpecLink,
				_originalData.GageId,
				_originalData.DmeGlobalId
				);
				
			return (MstNodesAc)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MstNodesAcBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MstNodesAcBase)
				return ValueEquals(this, (MstNodesAcBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MstNodesAcBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MapinfoId.GetHashCode() ^ 
					this.Node.GetHashCode() ^ 
					((this.Xcoord == null) ? string.Empty : this.Xcoord.ToString()).GetHashCode() ^ 
					((this.Ycoord == null) ? string.Empty : this.Ycoord.ToString()).GetHashCode() ^ 
					((this.NodeType == null) ? string.Empty : this.NodeType.ToString()).GetHashCode() ^ 
					((this.GrndElev == null) ? string.Empty : this.GrndElev.ToString()).GetHashCode() ^ 
					((this.HasSpecNode == null) ? string.Empty : this.HasSpecNode.ToString()).GetHashCode() ^ 
					((this.HasSpecLink == null) ? string.Empty : this.HasSpecLink.ToString()).GetHashCode() ^ 
					((this.GageId == null) ? string.Empty : this.GageId.ToString()).GetHashCode() ^ 
					((this.DmeGlobalId == null) ? string.Empty : this.DmeGlobalId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MstNodesAcBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MstNodesAcBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MstNodesAcBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MstNodesAcBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MstNodesAcBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MstNodesAcBase Object1, MstNodesAcBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MapinfoId != Object2.MapinfoId)
				equal = false;
			if (Object1.Node != Object2.Node)
				equal = false;
			if ( Object1.Xcoord != null && Object2.Xcoord != null )
			{
				if (Object1.Xcoord != Object2.Xcoord)
					equal = false;
			}
			else if (Object1.Xcoord == null ^ Object2.Xcoord == null )
			{
				equal = false;
			}
			if ( Object1.Ycoord != null && Object2.Ycoord != null )
			{
				if (Object1.Ycoord != Object2.Ycoord)
					equal = false;
			}
			else if (Object1.Ycoord == null ^ Object2.Ycoord == null )
			{
				equal = false;
			}
			if ( Object1.NodeType != null && Object2.NodeType != null )
			{
				if (Object1.NodeType != Object2.NodeType)
					equal = false;
			}
			else if (Object1.NodeType == null ^ Object2.NodeType == null )
			{
				equal = false;
			}
			if ( Object1.GrndElev != null && Object2.GrndElev != null )
			{
				if (Object1.GrndElev != Object2.GrndElev)
					equal = false;
			}
			else if (Object1.GrndElev == null ^ Object2.GrndElev == null )
			{
				equal = false;
			}
			if ( Object1.HasSpecNode != null && Object2.HasSpecNode != null )
			{
				if (Object1.HasSpecNode != Object2.HasSpecNode)
					equal = false;
			}
			else if (Object1.HasSpecNode == null ^ Object2.HasSpecNode == null )
			{
				equal = false;
			}
			if ( Object1.HasSpecLink != null && Object2.HasSpecLink != null )
			{
				if (Object1.HasSpecLink != Object2.HasSpecLink)
					equal = false;
			}
			else if (Object1.HasSpecLink == null ^ Object2.HasSpecLink == null )
			{
				equal = false;
			}
			if ( Object1.GageId != null && Object2.GageId != null )
			{
				if (Object1.GageId != Object2.GageId)
					equal = false;
			}
			else if (Object1.GageId == null ^ Object2.GageId == null )
			{
				equal = false;
			}
			if ( Object1.DmeGlobalId != null && Object2.DmeGlobalId != null )
			{
				if (Object1.DmeGlobalId != Object2.DmeGlobalId)
					equal = false;
			}
			else if (Object1.DmeGlobalId == null ^ Object2.DmeGlobalId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MstNodesAcBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MstNodesAcComparer GetComparer()
        {
            return new MstNodesAcComparer();
        }
        */

        // Comparer delegates back to MstNodesAc
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MstNodesAc rhs, MstNodesAcColumn which)
        {
            switch (which)
            {
            	
            	
            	case MstNodesAcColumn.MapinfoId:
            		return this.MapinfoId.CompareTo(rhs.MapinfoId);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.Node:
            		return this.Node.CompareTo(rhs.Node);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.Xcoord:
            		return this.Xcoord.Value.CompareTo(rhs.Xcoord.Value);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.Ycoord:
            		return this.Ycoord.Value.CompareTo(rhs.Ycoord.Value);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.NodeType:
            		return this.NodeType.CompareTo(rhs.NodeType);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.GrndElev:
            		return this.GrndElev.Value.CompareTo(rhs.GrndElev.Value);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.HasSpecNode:
            		return this.HasSpecNode.CompareTo(rhs.HasSpecNode);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.HasSpecLink:
            		return this.HasSpecLink.CompareTo(rhs.HasSpecLink);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.GageId:
            		return this.GageId.CompareTo(rhs.GageId);
            		
            		                 
            	
            	
            	case MstNodesAcColumn.DmeGlobalId:
            		return this.DmeGlobalId.Value.CompareTo(rhs.DmeGlobalId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MstNodesAcKey> Members
		
		// member variable for the EntityId property
		private MstNodesAcKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MstNodesAcKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MstNodesAcKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MstNodesAc")
					.Append("|").Append( this.MapinfoId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- MapinfoId: {0}{10}- Node: {1}{10}- Xcoord: {2}{10}- Ycoord: {3}{10}- NodeType: {4}{10}- GrndElev: {5}{10}- HasSpecNode: {6}{10}- HasSpecLink: {7}{10}- GageId: {8}{10}- DmeGlobalId: {9}{10}{12}", 
				this.MapinfoId,
				this.Node,
				(this.Xcoord == null) ? string.Empty : this.Xcoord.ToString(),
				(this.Ycoord == null) ? string.Empty : this.Ycoord.ToString(),
				(this.NodeType == null) ? string.Empty : this.NodeType.ToString(),
				(this.GrndElev == null) ? string.Empty : this.GrndElev.ToString(),
				(this.HasSpecNode == null) ? string.Empty : this.HasSpecNode.ToString(),
				(this.HasSpecLink == null) ? string.Empty : this.HasSpecLink.ToString(),
				(this.GageId == null) ? string.Empty : this.GageId.ToString(),
				(this.DmeGlobalId == null) ? string.Empty : this.DmeGlobalId.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'mst_nodes_ac' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MstNodesAcEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MAPINFO_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "mst_nodes_ac"</remarks>
		public System.Int32 MapinfoId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalMapinfoId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Node : 
		/// </summary>
		public System.String		  Node = string.Empty;
		
		/// <summary>
		/// XCoord : 
		/// </summary>
		public System.Double?		  Xcoord = null;
		
		/// <summary>
		/// YCoord : 
		/// </summary>
		public System.Double?		  Ycoord = null;
		
		/// <summary>
		/// NodeType : 
		/// </summary>
		public System.String		  NodeType = null;
		
		/// <summary>
		/// GrndElev : 
		/// </summary>
		public System.Double?		  GrndElev = null;
		
		/// <summary>
		/// HasSpecNode : 
		/// </summary>
		public System.String		  HasSpecNode = null;
		
		/// <summary>
		/// HasSpecLink : 
		/// </summary>
		public System.String		  HasSpecLink = null;
		
		/// <summary>
		/// GageID : 
		/// </summary>
		public System.String		  GageId = null;
		
		/// <summary>
		/// DME_GlobalID : 
		/// </summary>
		public System.Int32?		  DmeGlobalId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region MstLinksAcCollectionGetByDsNode
		
		private TList<MstLinksAc> _mstLinksAcUsNodeGetByDsNode;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mstLinksAcUsNodeGetByDsNode
		/// </summary>
		
		public TList<MstLinksAc> MstLinksAcCollectionGetByDsNode
		{
			get
			{
				if (_mstLinksAcUsNodeGetByDsNode == null)
				{
				_mstLinksAcUsNodeGetByDsNode = new TList<MstLinksAc>();
				}
	
				return _mstLinksAcUsNodeGetByDsNode;
			}
			set { _mstLinksAcUsNodeGetByDsNode = value; }
		}
		
		#endregion

		#region MstLinksAcCollectionGetByUsNode
		
		private TList<MstLinksAc> _mstLinksAcUsNodeGetByUsNode;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mstLinksAcUsNodeGetByUsNode
		/// </summary>
		
		public TList<MstLinksAc> MstLinksAcCollectionGetByUsNode
		{
			get
			{
				if (_mstLinksAcUsNodeGetByUsNode == null)
				{
				_mstLinksAcUsNodeGetByUsNode = new TList<MstLinksAc>();
				}
	
				return _mstLinksAcUsNodeGetByUsNode;
			}
			set { _mstLinksAcUsNodeGetByUsNode = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MstNodesAcEntityData _tmp = new MstNodesAcEntityData();
						
			_tmp.MapinfoId = this.MapinfoId;
			_tmp.OriginalMapinfoId = this.OriginalMapinfoId;
			
			_tmp.Node = this.Node;
			_tmp.Xcoord = this.Xcoord;
			_tmp.Ycoord = this.Ycoord;
			_tmp.NodeType = this.NodeType;
			_tmp.GrndElev = this.GrndElev;
			_tmp.HasSpecNode = this.HasSpecNode;
			_tmp.HasSpecLink = this.HasSpecLink;
			_tmp.GageId = this.GageId;
			_tmp.DmeGlobalId = this.DmeGlobalId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._mstLinksAcUsNodeGetByDsNode != null)
				_tmp.MstLinksAcCollectionGetByDsNode = (TList<MstLinksAc>) MakeCopyOf(this.MstLinksAcCollectionGetByDsNode); 
			if (this._mstLinksAcUsNodeGetByUsNode != null)
				_tmp.MstLinksAcCollectionGetByUsNode = (TList<MstLinksAc>) MakeCopyOf(this.MstLinksAcCollectionGetByUsNode); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MstNodesAcEntityData _tmp = new MstNodesAcEntityData();
						
			_tmp.MapinfoId = this.MapinfoId;
			_tmp.OriginalMapinfoId = this.OriginalMapinfoId;
			
			_tmp.Node = this.Node;
			_tmp.Xcoord = this.Xcoord;
			_tmp.Ycoord = this.Ycoord;
			_tmp.NodeType = this.NodeType;
			_tmp.GrndElev = this.GrndElev;
			_tmp.HasSpecNode = this.HasSpecNode;
			_tmp.HasSpecLink = this.HasSpecLink;
			_tmp.GageId = this.GageId;
			_tmp.DmeGlobalId = this.DmeGlobalId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.MstLinksAcCollectionGetByDsNode = (TList<MstLinksAc>) MakeCopyOf(this.MstLinksAcCollectionGetByDsNode, existingCopies); 
			_tmp.MstLinksAcCollectionGetByUsNode = (TList<MstLinksAc>) MakeCopyOf(this.MstLinksAcCollectionGetByUsNode, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MstNodesAcColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MstNodesAcColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MstNodesAcColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MstNodesAcColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MstNodesAcColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MstNodesAcColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MstNodesAcEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MstNodesAcEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MstNodesAcColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MstNodesAcColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MstNodesAcEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MstNodesAcEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MstNodesAcEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MstNodesAc"/> object.
	/// </remarks>
	public class MstNodesAcEventArgs : System.EventArgs
	{
		private MstNodesAcColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MstNodesAcEventArgs class.
		///</summary>
		public MstNodesAcEventArgs(MstNodesAcColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MstNodesAcEventArgs class.
		///</summary>
		public MstNodesAcEventArgs(MstNodesAcColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MstNodesAcColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MstNodesAcColumn" />
		public MstNodesAcColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MstNodesAc related events.
	///</summary>
	public delegate void MstNodesAcEventHandler(object sender, MstNodesAcEventArgs e);
	
	#region MstNodesAcComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MstNodesAcComparer : System.Collections.Generic.IComparer<MstNodesAc>
	{
		MstNodesAcColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MstNodesAcComparer"/> class.
        /// </summary>
		public MstNodesAcComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MstNodesAcComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MstNodesAcComparer(MstNodesAcColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MstNodesAc"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MstNodesAc"/> to compare.</param>
        /// <param name="b">The second <c>MstNodesAc</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MstNodesAc a, MstNodesAc b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MstNodesAc entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MstNodesAc a, MstNodesAc b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MstNodesAcColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MstNodesAcKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MstNodesAc"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MstNodesAcKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MstNodesAcKey class.
		/// </summary>
		public MstNodesAcKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MstNodesAcKey class.
		/// </summary>
		public MstNodesAcKey(MstNodesAcBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MapinfoId = entity.MapinfoId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MstNodesAcKey class.
		/// </summary>
		public MstNodesAcKey(System.Int32 _mapinfoId)
		{
			#region Init Properties

			this.MapinfoId = _mapinfoId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MstNodesAcBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MstNodesAcBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MapinfoId property
		private System.Int32 _mapinfoId;
		
		/// <summary>
		/// Gets or sets the MapinfoId property.
		/// </summary>
		public System.Int32 MapinfoId
		{
			get { return _mapinfoId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MapinfoId = value;
				
				_mapinfoId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MapinfoId = ( values["MapinfoId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["MapinfoId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MapinfoId", MapinfoId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MapinfoId: {0}{1}",
								MapinfoId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MstNodesAcColumn Enum
	
	/// <summary>
	/// Enumerate the MstNodesAc columns.
	/// </summary>
	[Serializable]
	public enum MstNodesAcColumn : int
	{
		/// <summary>
		/// MapinfoId : 
		/// </summary>
		[EnumTextValue("MAPINFO_ID")]
		[ColumnEnum("MAPINFO_ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		MapinfoId = 1,
		/// <summary>
		/// Node : 
		/// </summary>
		[EnumTextValue("Node")]
		[ColumnEnum("Node", typeof(System.String), System.Data.DbType.String, false, false, false, 6)]
		Node = 2,
		/// <summary>
		/// Xcoord : 
		/// </summary>
		[EnumTextValue("XCoord")]
		[ColumnEnum("XCoord", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Xcoord = 3,
		/// <summary>
		/// Ycoord : 
		/// </summary>
		[EnumTextValue("YCoord")]
		[ColumnEnum("YCoord", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Ycoord = 4,
		/// <summary>
		/// NodeType : 
		/// </summary>
		[EnumTextValue("NodeType")]
		[ColumnEnum("NodeType", typeof(System.String), System.Data.DbType.String, false, false, true, 4)]
		NodeType = 5,
		/// <summary>
		/// GrndElev : 
		/// </summary>
		[EnumTextValue("GrndElev")]
		[ColumnEnum("GrndElev", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		GrndElev = 6,
		/// <summary>
		/// HasSpecNode : 
		/// </summary>
		[EnumTextValue("HasSpecNode")]
		[ColumnEnum("HasSpecNode", typeof(System.String), System.Data.DbType.String, false, false, true, 1)]
		HasSpecNode = 7,
		/// <summary>
		/// HasSpecLink : 
		/// </summary>
		[EnumTextValue("HasSpecLink")]
		[ColumnEnum("HasSpecLink", typeof(System.String), System.Data.DbType.String, false, false, true, 1)]
		HasSpecLink = 8,
		/// <summary>
		/// GageId : 
		/// </summary>
		[EnumTextValue("GageID")]
		[ColumnEnum("GageID", typeof(System.String), System.Data.DbType.String, false, false, true, 8)]
		GageId = 9,
		/// <summary>
		/// DmeGlobalId : 
		/// </summary>
		[EnumTextValue("DME_GlobalID")]
		[ColumnEnum("DME_GlobalID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DmeGlobalId = 10
	}//End enum

	#endregion MstNodesAcColumn Enum

} // end namespace
